---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "aGRQNlY5aFIzVU5tdzJHYjU0bXlieG94UG8zUWI3RFpBeEhPVE9zSmlZdkQwVHJSbVZXYmY1Q3cxQkVDWEJ5MQ=="
  hub.config.JupyterHub.cookie_secret: "ZmQyNzE3Mjg1NTczODIzZjgxZjc3NGRhMzU1NzQyMjI0MzNlZTgwYTllMzdlOTZmNmI2MTFlNmYwNDYzNmQ1ZQ=="
  hub.config.CryptKeeper.keys: "Y2I0NTQzNDZmZGNhMjI3OTE5ZDQ3NjU0ZjM1ZmNjY2MzNmFiZDgxOTY4YWNhZjhkZWJkNTQ0MGJmZDAxYzgyOA=="

---
# Source: basehub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: production
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: autohttps
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-http: "true"
      annotations:
        # Only force a restart through a change to this checksum when the static
        # configuration is changed, as the dynamic can be updated after start.
        # Any disruptions to this deployment impacts everything, it is the
        # entrypoint of all network traffic.
        checksum/static-config: a57b3caf3f1a67df6ef444e132303d87f4e4894c3bd1a71826b2933b71ec806a
    spec:
      serviceAccountName: autohttps
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: certificates
          emptyDir: {}
        - name: traefik-config
          configMap:
            name: autohttps
      initContainers:
        - name: load-acme
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - load
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
            # We need this to get logs immediately
            - name: PYTHONUNBUFFERED
              value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: traefik
          image: "traefik:v2.11.0"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: traefik-config
              mountPath: /etc/traefik
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: secret-sync
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - watch-save
            - --label=app=jupyterhub
            - --label=release=production
            - --label=chart=jupyterhub-3.3.8
            - --label=heritage=secret-sync
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
          # We need this to get logs immediately
          - name: PYTHONUNBUFFERED
            value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: production
  ports:
    - name: hub
      port: 8081
      targetPort: http

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: production
    spec:
      schedulerName: production-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              cpu: 1.5
              memory: 6G
            limits:
              cpu: 2
              memory: 6G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "e5ca"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: userpool-storage-production
provisioner: disk.csi.azure.com
parameters:
  skuName: StandardSSD_LRS
  storageaccounttype: StandardSSD_LRS
  kind: Managed
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
reclaimPolicy: Delete
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - switzerlandnorth-1  # Change to switzerlandnorth-2 or switzerlandnorth-3 

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/configmap.yaml
# This configmap contains Traefik configuration files to be mounted.
# - traefik.yaml will only be read during startup (static configuration)
# - dynamic.yaml will be read on change (dynamic configuration)
#
# ref: https://docs.traefik.io/getting-started/configuration-overview/
#
# The configuration files are first rendered with Helm templating to large YAML
# strings. Then we use the fromYAML function on these strings to get an object,
# that we in turn merge with user provided extra configuration.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  traefik.yaml: |
    accessLog:
      fields:
        headers:
          names:
            Authorization: redacted
            Cookie: redacted
            Set-Cookie: redacted
            X-Xsrftoken: redacted
      filters:
        statusCodes:
        - 500-599
    certificatesResolvers:
      default:
        acme:
          caServer: https://acme-v02.api.letsencrypt.org/directory
          email: aiidalab@materialscloud.org
          httpChallenge:
            entryPoint: http
          storage: /etc/acme/acme.json
    entryPoints:
      http:
        address: :8080
      https:
        address: :8443
        transport:
          respondingTimeouts:
            idleTimeout: 10m0s
    log:
      level: WARN
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
  dynamic.yaml: |
    http:
      middlewares:
        hsts:
          headers:
            stsIncludeSubdomains: false
            stsPreload: false
            stsSeconds: 15724800
        redirect:
          redirectScheme:
            permanent: true
            scheme: https
        scheme:
          headers:
            customRequestHeaders:
              X-Scheme: https
      routers:
        default:
          entrypoints:
          - https
          middlewares:
          - hsts
          - scheme
          rule: PathPrefix(`/`)
          service: default
          tls:
            certResolver: default
            domains:
            - main: psi-tutorial.aiidalab.io
            options: default
        insecure:
          entrypoints:
          - http
          middlewares:
          - redirect
          rule: PathPrefix(`/`)
          service: default
      services:
        default:
          loadBalancer:
            servers:
            - url: http://proxy-http:8000/
    tls:
      options:
        default:
          cipherSuites:
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          minVersion: VersionTLS12
          sniStrict: true

---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"

---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "production"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/templates/users-config.yaml
jupyterhub:
    hub:
        config:
            GitHubOAuthenticator:
                allowed_users:
                                    allowed_users:
                  - superstar54
                  - unkcpz
                  - edan-bainglass
                  - giovannipizzi
                  - t-reents
                  - AndresOrtegaGuerrero
                allow_existing_users: false
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
        - port: https
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

  egress:
    # autohttps --> proxy (http port)
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 4a3737dc265869bf7c416b95a7509ab6cbbac87919b0bc4699c1c7e7228fbe31
        checksum/secret: f343508fba2a37a55112cc81325e30b93ccd931212685d4a8c5b919c41f7c155
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - configMap:
            name: hub-templates
          name: hub-templates
        - configMap:
            name: hub-external
          name: hub-external
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.3.8
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /etc/jupyterhub/templates
              name: hub-templates
            - mountPath: /usr/local/share/jupyterhub/static/external
              name: hub-external
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "production"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            httpGet:
              path: /hub/health
              port: http

---
# Source: basehub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "production-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "production-default-priority"
  user-placeholder-priority: "production-user-placeholder-priority"
  user-scheduler: "production-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
  
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c"

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-http
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8000
      targetPort: http

---
# Source: basehub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: production
      annotations:
        checksum/config-map: b8f3cecec7a35ee90e436feb3a0882c932ac69bdc34a216c857e70736b6ce89d
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.15
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-templates
data:
  README.md: |-
    # Templates
  
    The templates are adapted from [LibreTexts/jupyterhub-templates](https://github.com/LibreTexts/jupyterhub-templates).
  about.html: |-
    <html>
        <head>
            <title>About Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://www.aiidalab.net/about/" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab about page. If you are not redirected, click <a href="https://www.aiidalab.net/about/">here</a> to go to the page.</p>
       </body>
    </html>
  faq.html: |-
    <html>
        <head>
            <title>FAQ Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab documentation page. If you are not redirected, click <a href="https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page">here</a> to go to the page.</p>
       </body>
    </html>
  login.html: "{% extends \"templates/login.html\" %}\n\n{% block title %}PSI AiiDAlab
    - Login{% endblock %}\n\n<!-- Global site tag (gtag.js) - Google Analytics (comming
    soon) -->\n\n{% block main %}\n\n<div class=\"main-content container\">\n  <div
    class=\"branding\">\n    <div class=\"logos\">\n      <a class=\"logo\" href=\"https://aiidalab.net\"
    target=\"_blank\">\n        <img src=\"/hub/static/external/aiidalab-wide-logo.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n      </a>\n      <a
    class=\"logo\" href=\"https://psi.ch\" target=\"_blank\" style=\"padding:20px;\">\n
    \       <img src=\"/hub/static/external/psi-logo.png\" alt=\"PSI\" style=\"max-height:100px;max-width:100%;\">\n
    \     </a>\n      <a class=\"logo\" href=\"https://www.psi.ch/en/lms\" target=\"_blank\">\n
    \       Laboratory for Materials Simulations (LMS)\n      </a>\n      <a class=\"logo\"
    href=\"http://nccr-marvel.ch/\" target=\"_blank\">\n        <img class=\"sponsor\"
    src=\"/hub/static/external/marvel-cropped-logo.png\" alt=\"NCCR MARVEL\" style=\"max-height:100px;max-width:100%\">\n
    \     </a>\n    </div>\n  </div>\n\n  {% block login %}\n  <div class=\"col-sm-4
    left-col\">\n    <div id=\"login-box\">\n      <h3 align=\"center\">Login to AiiDAlab</h3>\n
    \     <div align=\"center\">\n        <a class=\"logo\" href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">\n          <img src=\"https://indico.psi.ch/event/17436/logo-123289806.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n        </a>\n      </div>\n
    \     {{ super() }}\n    </div>\n\n    <div id=\"sponsor\">\n        <p>\n        <small>\n
    \           This work is or has been supported by the <a href=\"http://nccr-marvel.ch\">MARVEL
    National Centre of Competence in Research</a> and funded by the <a href=\"http://www.snf.ch/en\">Swiss
    National Science Foundation</a>, the MARKETPLACE project funded by <a href=\"https://ec.europa.eu/programmes/horizon2020/\">Horizon
    2020</a> under the H2020-NMBP-25-2017 call (Grant No.&nbsp;760173), as well as by
    the <a href=\"http://www.max-centre.eu/\">MaX European Centre of Excellence</a>
    funded by the Horizon 2020 EINFRA-5 program, Grant No.&nbsp;676598, and other <a
    href=\"https://www.materialscloud.org/home#partners\">Materials Cloud partners</a>.\n
    \       </small>\n        </p>\n    </div>\n    <div id=\"acknowledgement\">\n      <p>\n
    \     <small>\n        We kindly ask you to cite the following publication if you
    use AiiDAlab:\n        <p class=\"reference\">\n            A. V. Yakutovich et
    al., Comp. Mat. Sci. 188, 110165 (2021) <a href=\"https://doi.org/10.1016/j.commatsci.2020.110165\"
    target=\"_blank\">DOI:10.1016/j.commatsci.2020.110165</a>\n        </p>\n      </small>\n
    \     </p>\n    </div>\n\n\n    <div class=\"sponsors row align-items-center justify-content-around
    flex-wrap\"></div>\n  </div>\n  {% endblock login %}\n\n  <div class=\"container
    col-sm-7\">\n    <h1>Welcome to the AiiDAlab deployment for PSI tutorials!</h1>\n
    \   <p>This AiiDAlab server is deployed and maintained by the <a href=\"https://www.psi.ch/en/lms/msd-group\"
    target=\"_blank\">Materials Software and Data Group (MSD)</a> \n      and its aim
    is to serve users during the course <a href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">Electronic-structure simulations for user communities at large-scale
    facilities</a>.</p>\n    <p>The virtual machines used for this course are provided
    by the <a href=\"https://azure.microsoft.com\" target=\"_blank\">Azure cloud service</a>.</p>\n\n
    \   <h2>Login to AiiDAlab</h2>\n    <p>\n      The service is accessible with GitHub
    credentials:\n      <ul>\n        <li>Click on the \"Sign in with GitHub\" button.</li>\n
    \       <li>Authorize the application to access your GitHub account (needed for
    authentication).</li>\n        <li>Once you are logged in, you will be redirected
    to the AiiDAlab home page.</li>\n      </ul>\n    </p>\n\n    <h2 id=\"gettingstartedwithaiidalab\">Getting
    started with AiiDAlab</h2>\n    <p>\n      <a href=\"https://aiidalab.net\" target=\"_blank\">AiiDAlab</a>
    is a web environment to run materials simulation online. \n      It is based on
    <a href=\"https://jupyter.org/index.html\" target=\"_blank\">Jupyter</a> as the
    web backend, and <a href=\"https://aiida.net\" target=\"_blank\">AiiDA</a> as the
    workflow engine.\n    </p>\n\n    <p>Some resources to learn AiiDAlab:</p>\n    <ul>\n
    \     <li>\n        <a href=\"https://aiidalab.readthedocs.io/en/latest/\" target=\"_blank\">Our
    official documentation</a>, for a more detailed introduction and hands on guide.\n
    \     </li>\n      <li>\n        An <a href=\"https://www.youtube.com/watch?v=Oqo5buk6Om8\"
    target=\"_blank\">AiiDAlab introduction</a> video for an overview.\n      </li>\n
    \   </ul>\n\n    <h2>Any questions?</h2>\n    <p>Please checkout our <a href=\"{{base_url}}faq\"
    target=\"_blank\">FAQ</a> page. If you cannot find your question, feel free to <a
    href=\"mailto:miki.bonacci@psi.ch?subject=[Help]%20AiiDAlab PSI&cc=giovanni.pizzi@psi.ch,xing.wang@psi.ch\"
    target=\"_blank\">send an email to the developers</a>. For technical issues, <a
    href=\"https://gitlab.psi.ch/yu_j/aiidalab-psi-deploy/-/issues/new\" target=\"_blank\">open
    an issue on GitLab</a> and we will try to resolve it.</p>\n  </div>\n</div>\n\n{%
    endblock main %}\n\n{% block stylesheet %}\n{{ super() }}\n<style>\n  .main-content
    {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .logos {\n    display:
    flex;\n    align-items: center;\n    justify-content: space-around;\n    margin:
    auto 30px;\n    flex-wrap: nowrap;\n  }\n\n  .left-col {\n    margin-top: 20px;\n
    \ }\n\n  .brand {\n    flex-shrink: 2;\n  }\n\n  @media all and (max-width: 500px)
    {\n    .logos {\n      /* On small screens, we are no longer using row direction
    but column */\n      /* flex-direction: column; */\n      align-items: center;\n
    \     justify-content: center;\n      flex-wrap: wrap;\n    }\n    .branding img
    {\n      justify-content: center;\n      max-width: 100%;\n    }\n  }\n\n  @media
    (max-width: 767px) {\n    .logos {\n      justify-content: space-around;\n    }\n
    \   .logo {\n      flex-basis: 50%;\n    }\n  }\n\n  @media (max-width: 1400px)
    {\n    .logos {\n      justify-content: space-around;\n    }\n    .main-content
    {\n      width: 100%;\n    }\n  }\n\n  @media (min-width: 1401px) {\n    .main-content
    {\n      width: 1400px;\n    }\n  }\n\n  .sponsors {\n    display: flex;\n    flex-direction:
    row;\n    justify-content: space-evenly;\n  }\n\n  .sponsors-footer {\n    height:
    300px;\n  }\n\n  .sponsor {\n    padding: 10px;\n    max-width: 100%;\n    max-height:
    150px;\n  }\n\n  #login-box {\n    border: 1px solid silver;\n    padding: 10px;\n
    \   margin-bottom: 30px;\n    /*   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0
    6px 20px 0 rgba(0, 0, 0, 0.19);\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0,
    0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    -moz-box-shadow: 0 4px 8px 0 rgba(0,
    0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */\n    border-radius: 5px;\n    flex-grow:
    2;\n  }\n\n  .body {\n    padding-bottom: 50px;\n  }\n\n  #login-main .auth-form-body
    {\n    border-color: rgb(0, 124, 186);\n    color: white;\n  }\n\n  #login-main
    {\n    margin-top: 5%;\n    height: inherit;\n    width: inherit;\n    margin-bottom:
    5%;\n  }\n\n  #login-main .container {\n    width: 50%;\n  }\n\n  footer {\n    border-top:
    1px solid silver;\n    padding: 10px;\n    bottom: 0;\n    position: fixed;\n    width:
    100%;\n  }\n\n  footer p {\n    margin: 0 auto 0 auto;\n    text-align: center;\n
    \ }\n\n  #login-main form {\n    vertical-align: top;\n  }\n\n  #login-main .auth-form-header
    {\n    color: white;\n    background: rgb(219, 170, 0);\n    border: 1px solid;\n
    \   border-color: rgb(0, 124, 186);\n  }\n\n  #insecure-login-warning {\n    color:
    black;\n  }\n\n  .btn-jupyter.active,\n  .btn-jupyter:active,\n  .open>.dropdown-toggle.btn-jupyter
    {\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px #a88400;\n    border-color:
    #a88400;\n    outline-color: #a88400;\n  }\n\n  #login-main .form-control:focus,\n
    \ #login-main input[type=submit]:focus {\n    box-shadow: inset 0 1px 1px rgba(0,
    0, 0, .075), 0 0 8px rgb(219, 170, 0);\n    border-color: rgb(219, 170, 0);\n    outline-color:
    rgb(219, 170, 0);\n  }\n\n  .btn-jupyter {\n    color: #fff;\n    background-color:
    #F37524;\n    border-color: #E34F21;\n    padding: 10px;\n  }\n\n  .col-1 {\n    width:
    8.33%;\n  }\n\n  .col-2 {\n    width: 16.66%;\n  }\n\n  .col-3 {\n    width: 25%;\n
    \ }\n\n  .col-4 {\n    width: 33.33%;\n  }\n\n  .col-5 {\n    width: 41.66%;\n  }\n\n
    \ .col-6 {\n    width: 50%;\n  }\n\n  .col-7 {\n    width: 58.33%;\n  }\n\n  .col-8
    {\n    width: 66.66%;\n  }\n\n  .col-9 {\n    width: 75%;\n  }\n\n  .col-10 {\n
    \   width: 83.33%;\n  }\n\n  .col-11 {\n    width: 91.66%;\n  }\n\n  .col-12 {\n
    \   width: 100%;\n  }\n</style>\n{% endblock %}"
  page.html: "{% extends \"templates/page.html\" %}\n\n{% block nav_bar %}\n  <nav class=\"navbar
    navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n
    \       {% block logo %}\n        <span id=\"jupyterhub-logo\" class=\"pull-left\">\n
    \           <a href=\"{{logo_url or base_url}}\"><img src='{{base_url}}logo' alt='JupyterHub'
    class='jpy-logo' title='Home'/></a>\n        </span>\n        {% endblock %}\n        <button
    type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#thenavbar\"
    aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n
    \         <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n
    \         <span class=\"icon-bar\"></span>\n        </button>\n      </div>\n\n
    \     <div class=\"collapse navbar-collapse\" id=\"thenavbar\">\n        {% if user
    %}\n        <ul class=\"nav navbar-nav\">\n          {% block nav_bar_left_items
    %}\n            <li><a href=\"{{base_url}}home\">Home</a></li>\n            <li><a
    href=\"{{base_url}}token\">Token</a></li>\n            {% if user.admin %}\n            <li><a
    href=\"{{base_url}}admin\">Admin</a></li>\n            {% endif %}\n            {%
    if services %}\n            <li class=\"dropdown\">\n              <a href=\"#\"
    class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"
    aria-expanded=\"false\">Services<span class=\"caret\"></span></a>\n              <ul
    class=\"dropdown-menu\">\n              {% for service in services %}\n                <li><a
    class=\"dropdown-item\" href=\"{{service.prefix}}\">{{service.name}}</a></li>\n
    \             {% endfor %}\n              </ul>\n            </li>\n            {%
    endif %}\n\n            {# Start AiiDAlab specific change #}\n            <li><a
    href=\"{{base_url}}about\">About</a></li>\n            <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \           {# End change #}\n\n          {% endblock %}\n        </ul>\n\n        {#
    Start AiiDAlab specific change #}\n        {% else %}\n        <ul class=\"nav navbar-nav\">\n
    \         <li><a href=\"{{base_url}}about\">About</a></li>\n          <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \       </ul>\n        {# End change #}\n\n        {% endif %}\n        <ul class=\"nav
    navbar-nav navbar-right\">\n          {% block nav_bar_right_items %}\n            <li>\n
    \             {% block login_widget %}\n                <span id=\"login_widget\">\n
    \                 {% if user %}\n\t\t    <p class=\"navbar-text\">{{user.name}}</p>\n
    \                   <a id=\"logout\" role=\"button\" class=\"navbar-btn btn-sm btn
    btn-default\" href=\"{{logout_url}}\"> <i aria-hidden=\"true\" class=\"fa fa-sign-out\"></i>
    Logout</a>\n                  {% else %}\n                    <a id=\"login\" role=\"button\"
    class=\"btn-sm btn navbar-btn btn-default\" href=\"{{login_url}}\">Login</a>\n                  {%
    endif %}\n                </span>\n              {% endblock %}\n            </li>\n
    \         {% endblock %}\n        </ul>\n      </div>\n\n      {% block header %}\n
    \     {% endblock %}\n    </div>\n  </nav>\n{% endblock %}"
  spawn_pending.html: |
    {% extends "templates/spawn_pending.html" %}
  
    {% block message %}
    <p>Your AiiDAlab server is starting up.</p>
    <ul>
        <li>You will be redirected automatically when it's ready for you.</li>
        <li>If you see any error or the procedure takes too long (>1 min), please ask for support.</li>
    </ul>
    {% endblock %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-external
binaryData:
  aiidalab-wide-logo.png: ''
  marvel-cropped-logo.png: ''
  psi-logo.png: ''
  psi-old-logo.svg: 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEiIHdpZHRoPSI0MjAiIGhlaWdodD0iMTUwIj48c3R5bGU+LnN0eWxlMHtmaWxsOiNiZGJhYmE7ZmlsbC1ydWxlOm5vbnplcm99LnN0eWxlMSwuc3R5bGUye3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDo0Ljk2Nzk5OTk0fS5zdHlsZTF7ZmlsbC1ydWxlOm5vbnplcm87ZmlsbDojZmZmfS5zdHlsZTJ7ZmlsbDpub25lfS5zdHlsZTN7ZmlsbDojMDAwfTwvc3R5bGU+PHBhdGggZD0iTTEwMS42IDczLjFIMzQuOGMtMTAuMyAwLTE4LjYgNy4xLTE4LjYgMTUuOXYxNi43YzAgOC44IDguMyAxNS45IDE4LjYgMTUuOWg2Ni44TTMxOS40IDczLjFoNjUuOGMxMC4zIDAgMTguNiA3LjEgMTguNiAxNS45djE2LjdjMCA4LjgtOC4zIDE1LjktMTguNiAxNS45aC02NS45TTE4Ny44IDEyMS41bDIuNS0xNC41LTU2LjktLjEuMiAxNC43IDU0LjItLjF6IiBjbGFzcz0ic3R5bGUwIi8+PHBhdGggZD0iTTE4OC40IDk5LjljMCA0LjgtMy45IDguNy04LjYgOC43aC00Ni4zdjIyLjljMCA0LjgtMy45IDguNy04LjcgOC43aC0xMy40Yy00LjggMC04LjctMy45LTguNy04LjdWNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoNjguNGM0LjcgMCA4LjYgMy45IDguNiA4Ljd2NDUuMnpNMjc0LjYgNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoMjdjNC44IDAgOC43IDMuOSA4LjcgOC43djc2LjhjMCA0LjgtMy45IDguNy04LjcgOC43aC0yN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0Ljd6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTI2NS45IDc3LjRjNC44IDAgOC43IDMuOSA4LjcgOC43djQ1LjRjMCA0LjgtMy45IDguNy04LjcgOC43aC02OC44Yy00LjggMC04LjctMy45LTguNy04Ljd2LTE0LjJjMC00LjggMy45LTguNyA4LjctOC43aDUwLjctNTAuN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0LjdjMC00LjggMy45LTguNyA4LjctOC43aDY4LjhjNC44IDAgOC43IDMuOSA4LjcgOC43djE0LjFjMCA0LjgtMy45IDguNi04LjcgOC42aC01MC4yIDUwLjJ6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTEzMC43IDc3LjRoMjkuNCIgY2xhc3M9InN0eWxlMiIvPjxwYXRoIGQ9Ik0zMy44IDI5LjR2LTkuNmM0LjUuMSA2LjItMS45IDYuMi02LjQgMC01LjUtMy4yLTUuOC01LjctNS44aC0zLjV2MjEuOGgzem0uNC0xOS4zYzIuMSAwIDIuNyAxLjcgMi43IDMuNiAwIDIuNC0uNyAzLjgtMy4xIDMuNnYtNy4yaC40ek01MSA3LjZsLTQuOCAyMS44aDIuOWwuOC00LjJoNC4zbC45IDQuMmgyLjhMNTMuMiA3LjZINTF6bTIuOCAxNS4zaC0zLjVsMS44LTExLjEgMS4xIDggLjYgMy4xek02Ni41IDcuNnYxNS4xYzAgMy45LjUgNy4xIDUgNy4xIDUuMSAwIDUtMy45IDUtNi43VjcuNmgtMi45djE2LjNjMCAxLjktLjEgMy4xLTIuMSAzLjEtMS4yIDAtMi0uNi0yLTMuNHYtMTZoLTN6TTg2LjcgNy42djIxLjhoNy44di0yLjVoLTQuOVY3LjZoLTIuOXpNMTE5LjQgOC4xYy0uOS0uNi0xLjktLjgtMy4xLS44LTMuMiAwLTQuOCAyLjYtNC44IDUuNiAwIDUuNyA2IDYuNiA2IDExIDAgMS42LS43IDMtMi41IDMtMS4xIDAtMi0uNS0yLjgtMS4xdjIuOWMuOC43IDIgMS4xIDMuMSAxLjEgMy4yIDAgNS4yLTIuNyA1LjItNS44IDAtMi45LTEuMi00LjQtMy4yLTYuNGwtMi4xLTIuM2MtLjYtLjgtLjktMS41LS45LTIuNCAwLTEuNSAxLTIuOCAyLjYtMi44IDEgMCAxLjguMyAyLjUuOVY4LjF6TTEzOCA3LjljLS44LS40LTEuNS0uNi0yLjUtLjYtNS45IDAtNi41IDcuMi02LjUgMTEuNiAwIDQuNS44IDEwLjkgNi43IDEwLjkuOSAwIDEuNi0uMiAyLjMtLjd2LTIuNWMtLjUuMy0xLjEuNC0xLjcuNC00IDAtNC4yLTUuNC00LjItOC4zIDAtMi44IDAtOC42IDQuMS04LjYuNiAwIDEuMi4yIDEuOC41VjcuOXpNMTQ2LjkgNy42djIxLjhoM1YxOC42aDQuM3YxMC44aDIuOVY3LjZoLTIuOXY4LjVoLTQuM1Y3LjZoLTN6TTE2Ny4zIDcuNnYyMS44aDcuOHYtMi41aC00Ljl2LTcuNGg0LjNWMTdoLTQuM3YtNi45aDQuOVY3LjZoLTcuOHpNMTg0IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42SDE4NHYyMS44em0yLjktMTIuMXYtNy4yaC41YzIuMS0uMSAyLjQgMS43IDIuNCAzLjcgMCAyLjMtLjggMy42LTIuOSAzLjV6TTIwMi43IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yMjEuNCA3LjZ2MjEuOGg3Ljh2LTIuNWgtNC45di03LjRoNC40VjE3aC00LjR2LTYuOWg0LjlWNy42aC03Ljh6TTIzOC4xIDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yNzAgNy42aC0yLjl2MjEuOGgyLjlWNy42ek0yODIuNSAxMi43bC4xLS4xIDUgMTYuOGgyLjdWNy42aC0yLjl2Ny44bC43IDguN3YuMUwyODMgNy42aC0yLjh2MjEuOGgyLjl2LThsLS40LTcuMy0uMi0xLjR6TTMwNy4zIDguMWMtMS0uNi0yLS44LTMuMS0uOC0zLjIgMC00LjkgMi42LTQuOSA1LjYgMCA1LjcgNi4xIDYuNiA2LjEgMTEgMCAxLjYtLjggMy0yLjUgMy0xLjEgMC0yLS41LTIuOS0xLjF2Mi45Yy45LjcgMi4xIDEuMSAzLjIgMS4xIDMuMiAwIDUuMS0yLjcgNS4xLTUuOCAwLTIuOS0xLjEtNC40LTMuMS02LjRsLTIuMi0yLjNjLS41LS44LS44LTEuNS0uOC0yLjQgMC0xLjUgMS0yLjggMi42LTIuOCAxIDAgMS43LjMgMi41LjlWOC4xek0zMTUuNiA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXpNMzM2LjQgNy42aC0zdjIxLjhoM1Y3LjZ6TTM0NC43IDcuNnYyLjVoMy40djE5LjNoMi45VjEwLjFoMy4yVjcuNmgtOS41ek0zNjIuNiA3LjZ2MTUuMWMwIDMuOS40IDcuMSA1IDcuMSA1IDAgNS0zLjkgNS02LjdWNy42aC0yLjl2MTYuM2MwIDEuOS0uMiAzLjEtMi4yIDMuMS0xLjIgMC0yLS42LTItMy40di0xNmgtMi45ek0zODAuOSA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXoiIGNsYXNzPSJzdHlsZTMiLz48L3N2Zz4='
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-etc-jupyter
data:
  {}

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "production"
    profiles:
      - schedulerName: production-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "production"
roleRef:
  kind: ClusterRole
  name: production-user-scheduler
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8001
      targetPort: api
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: autohttps
    app: jupyterhub
    release: production
  ports:
    - name: https
      port: 443
      # When HTTPS termination is handled outside our helm chart, pass traffic
      # coming in via this Service's port 443 to targeted pod's port meant for
      # HTTP traffic.
      targetPort: https
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer

---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  storageClassName: "userpool-storage-production"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: autohttps
  apiGroup:
roleRef:
  kind: Role
  name: autohttps
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/configmap.yaml
# This configmap contains Traefik configuration files to be mounted.
# - traefik.yaml will only be read during startup (static configuration)
# - dynamic.yaml will be read on change (dynamic configuration)
#
# ref: https://docs.traefik.io/getting-started/configuration-overview/
#
# The configuration files are first rendered with Helm templating to large YAML
# strings. Then we use the fromYAML function on these strings to get an object,
# that we in turn merge with user provided extra configuration.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  traefik.yaml: |
    accessLog:
      fields:
        headers:
          names:
            Authorization: redacted
            Cookie: redacted
            Set-Cookie: redacted
            X-Xsrftoken: redacted
      filters:
        statusCodes:
        - 500-599
    certificatesResolvers:
      default:
        acme:
          caServer: https://acme-v02.api.letsencrypt.org/directory
          email: aiidalab@materialscloud.org
          httpChallenge:
            entryPoint: http
          storage: /etc/acme/acme.json
    entryPoints:
      http:
        address: :8080
      https:
        address: :8443
        transport:
          respondingTimeouts:
            idleTimeout: 10m0s
    log:
      level: WARN
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
  dynamic.yaml: |
    http:
      middlewares:
        hsts:
          headers:
            stsIncludeSubdomains: false
            stsPreload: false
            stsSeconds: 15724800
        redirect:
          redirectScheme:
            permanent: true
            scheme: https
        scheme:
          headers:
            customRequestHeaders:
              X-Scheme: https
      routers:
        default:
          entrypoints:
          - https
          middlewares:
          - hsts
          - scheme
          rule: PathPrefix(`/`)
          service: default
          tls:
            certResolver: default
            domains:
            - main: psi-tutorial.aiidalab.io
            options: default
        insecure:
          entrypoints:
          - http
          middlewares:
          - redirect
          rule: PathPrefix(`/`)
          service: default
      services:
        default:
          loadBalancer:
            servers:
            - url: http://proxy-http:8000/
    tls:
      options:
        default:
          cipherSuites:
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          minVersion: VersionTLS12
          sniStrict: true

---
# Source: basehub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 4a3737dc265869bf7c416b95a7509ab6cbbac87919b0bc4699c1c7e7228fbe31
        checksum/secret: d07f8d6bdfcba0a39e280c59e461ef8d555bc0868dfcdf0bae2e77a7b6444ad7
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - configMap:
            name: hub-templates
          name: hub-templates
        - configMap:
            name: hub-external
          name: hub-external
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.3.8
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /etc/jupyterhub/templates
              name: hub-templates
            - mountPath: /usr/local/share/jupyterhub/static/external
              name: hub-external
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "production"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            httpGet:
              path: /hub/health
              port: http

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "production"
roleRef:
  kind: ClusterRole
  name: production-user-scheduler
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: production
    spec:
      schedulerName: production-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              cpu: 1.5
              memory: 6G
            limits:
              cpu: 2
              memory: 6G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: production
  ports:
    - name: hub
      port: 8081
      targetPort: http

---
# Source: basehub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "production-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "production-default-priority"
  user-placeholder-priority: "production-user-placeholder-priority"
  user-scheduler: "production-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
  
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c"

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "VjkxMlVUT1I1ekNHYnpWeEg5cjFWRWUxQzBDU1dvYWRMUjZ2dXJwVkJQQXJYb1VDMVNvNW1xVzdiOWpiMGh0bQ=="
  hub.config.JupyterHub.cookie_secret: "MGI3ZWZjZTIxZjEyNGE5YWI5NWFiMzY0NjNmOWJmN2I0Y2ZmMmM5N2RjMDA0MTk1ZTNjMzZmNzY0NmJiNjBmMQ=="
  hub.config.CryptKeeper.keys: "OTVhMjMzZTlhOWRmZjlmOWMxOTUxNjBjYWFiZTNlZjQ0NTQ3ZDdjNGRjZTAwODdjYzkxYzNkMmQ4OTRkYjAwYg=="

---
# Source: basehub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "659a"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: userpool-storage-production
provisioner: disk.csi.azure.com
parameters:
  skuName: StandardSSD_LRS
  storageaccounttype: StandardSSD_LRS
  kind: Managed
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
reclaimPolicy: Delete
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - switzerlandnorth-1  # Change to switzerlandnorth-2 or switzerlandnorth-3 

---
# Source: basehub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "production"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  storageClassName: "userpool-storage-production"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: autohttps
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-http: "true"
      annotations:
        # Only force a restart through a change to this checksum when the static
        # configuration is changed, as the dynamic can be updated after start.
        # Any disruptions to this deployment impacts everything, it is the
        # entrypoint of all network traffic.
        checksum/static-config: a57b3caf3f1a67df6ef444e132303d87f4e4894c3bd1a71826b2933b71ec806a
    spec:
      serviceAccountName: autohttps
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: certificates
          emptyDir: {}
        - name: traefik-config
          configMap:
            name: autohttps
      initContainers:
        - name: load-acme
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - load
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
            # We need this to get logs immediately
            - name: PYTHONUNBUFFERED
              value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: traefik
          image: "traefik:v2.11.0"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: traefik-config
              mountPath: /etc/traefik
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: secret-sync
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - watch-save
            - --label=app=jupyterhub
            - --label=release=production
            - --label=chart=jupyterhub-3.3.8
            - --label=heritage=secret-sync
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
          # We need this to get logs immediately
          - name: PYTHONUNBUFFERED
            value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-http
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8000
      targetPort: http

---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-templates
data:
  README.md: |-
    # Templates
  
    The templates are adapted from [LibreTexts/jupyterhub-templates](https://github.com/LibreTexts/jupyterhub-templates).
  about.html: |-
    <html>
        <head>
            <title>About Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://www.aiidalab.net/about/" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab about page. If you are not redirected, click <a href="https://www.aiidalab.net/about/">here</a> to go to the page.</p>
       </body>
    </html>
  faq.html: |-
    <html>
        <head>
            <title>FAQ Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab documentation page. If you are not redirected, click <a href="https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page">here</a> to go to the page.</p>
       </body>
    </html>
  login.html: "{% extends \"templates/login.html\" %}\n\n{% block title %}PSI AiiDAlab
    - Login{% endblock %}\n\n<!-- Global site tag (gtag.js) - Google Analytics (comming
    soon) -->\n\n{% block main %}\n\n<div class=\"main-content container\">\n  <div
    class=\"branding\">\n    <div class=\"logos\">\n      <a class=\"logo\" href=\"https://aiidalab.net\"
    target=\"_blank\">\n        <img src=\"/hub/static/external/aiidalab-wide-logo.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n      </a>\n      <a
    class=\"logo\" href=\"https://psi.ch\" target=\"_blank\" style=\"padding:20px;\">\n
    \       <img src=\"/hub/static/external/psi-logo.png\" alt=\"PSI\" style=\"max-height:100px;max-width:100%;\">\n
    \     </a>\n      <a class=\"logo\" href=\"https://www.psi.ch/en/lms\" target=\"_blank\">\n
    \       Laboratory for Materials Simulations (LMS)\n      </a>\n      <a class=\"logo\"
    href=\"http://nccr-marvel.ch/\" target=\"_blank\">\n        <img class=\"sponsor\"
    src=\"/hub/static/external/marvel-cropped-logo.png\" alt=\"NCCR MARVEL\" style=\"max-height:100px;max-width:100%\">\n
    \     </a>\n    </div>\n  </div>\n\n  {% block login %}\n  <div class=\"col-sm-4
    left-col\">\n    <div id=\"login-box\">\n      <h3 align=\"center\">Login to AiiDAlab</h3>\n
    \     <div align=\"center\">\n        <a class=\"logo\" href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">\n          <img src=\"https://indico.psi.ch/event/17436/logo-123289806.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n        </a>\n      </div>\n
    \     {{ super() }}\n    </div>\n\n    <div id=\"sponsor\">\n        <p>\n        <small>\n
    \           This work is or has been supported by the <a href=\"http://nccr-marvel.ch\">MARVEL
    National Centre of Competence in Research</a> and funded by the <a href=\"http://www.snf.ch/en\">Swiss
    National Science Foundation</a>, the MARKETPLACE project funded by <a href=\"https://ec.europa.eu/programmes/horizon2020/\">Horizon
    2020</a> under the H2020-NMBP-25-2017 call (Grant No.&nbsp;760173), as well as by
    the <a href=\"http://www.max-centre.eu/\">MaX European Centre of Excellence</a>
    funded by the Horizon 2020 EINFRA-5 program, Grant No.&nbsp;676598, and other <a
    href=\"https://www.materialscloud.org/home#partners\">Materials Cloud partners</a>.\n
    \       </small>\n        </p>\n    </div>\n    <div id=\"acknowledgement\">\n      <p>\n
    \     <small>\n        We kindly ask you to cite the following publication if you
    use AiiDAlab:\n        <p class=\"reference\">\n            A. V. Yakutovich et
    al., Comp. Mat. Sci. 188, 110165 (2021) <a href=\"https://doi.org/10.1016/j.commatsci.2020.110165\"
    target=\"_blank\">DOI:10.1016/j.commatsci.2020.110165</a>\n        </p>\n      </small>\n
    \     </p>\n    </div>\n\n\n    <div class=\"sponsors row align-items-center justify-content-around
    flex-wrap\"></div>\n  </div>\n  {% endblock login %}\n\n  <div class=\"container
    col-sm-7\">\n    <h1>Welcome to the AiiDAlab deployment for PSI tutorials!</h1>\n
    \   <p>This AiiDAlab server is deployed and maintained by the <a href=\"https://www.psi.ch/en/lms/msd-group\"
    target=\"_blank\">Materials Software and Data Group (MSD)</a> \n      and its aim
    is to serve users during the course <a href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">Electronic-structure simulations for user communities at large-scale
    facilities</a>.</p>\n    <p>The virtual machines used for this course are provided
    by the <a href=\"https://azure.microsoft.com\" target=\"_blank\">Azure cloud service</a>.</p>\n\n
    \   <h2>Login to AiiDAlab</h2>\n    <p>\n      The service is accessible with GitHub
    credentials:\n      <ul>\n        <li>Click on the \"Sign in with GitHub\" button.</li>\n
    \       <li>Authorize the application to access your GitHub account (needed for
    authentication).</li>\n        <li>Once you are logged in, you will be redirected
    to the AiiDAlab home page.</li>\n      </ul>\n    </p>\n\n    <h2 id=\"gettingstartedwithaiidalab\">Getting
    started with AiiDAlab</h2>\n    <p>\n      <a href=\"https://aiidalab.net\" target=\"_blank\">AiiDAlab</a>
    is a web environment to run materials simulation online. \n      It is based on
    <a href=\"https://jupyter.org/index.html\" target=\"_blank\">Jupyter</a> as the
    web backend, and <a href=\"https://aiida.net\" target=\"_blank\">AiiDA</a> as the
    workflow engine.\n    </p>\n\n    <p>Some resources to learn AiiDAlab:</p>\n    <ul>\n
    \     <li>\n        <a href=\"https://aiidalab.readthedocs.io/en/latest/\" target=\"_blank\">Our
    official documentation</a>, for a more detailed introduction and hands on guide.\n
    \     </li>\n      <li>\n        An <a href=\"https://www.youtube.com/watch?v=Oqo5buk6Om8\"
    target=\"_blank\">AiiDAlab introduction</a> video for an overview.\n      </li>\n
    \   </ul>\n\n    <h2>Any questions?</h2>\n    <p>Please checkout our <a href=\"{{base_url}}faq\"
    target=\"_blank\">FAQ</a> page. If you cannot find your question, feel free to <a
    href=\"mailto:miki.bonacci@psi.ch?subject=[Help]%20AiiDAlab PSI&cc=giovanni.pizzi@psi.ch,xing.wang@psi.ch\"
    target=\"_blank\">send an email to the developers</a>. For technical issues, <a
    href=\"https://gitlab.psi.ch/yu_j/aiidalab-psi-deploy/-/issues/new\" target=\"_blank\">open
    an issue on GitLab</a> and we will try to resolve it.</p>\n  </div>\n</div>\n\n{%
    endblock main %}\n\n{% block stylesheet %}\n{{ super() }}\n<style>\n  .main-content
    {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .logos {\n    display:
    flex;\n    align-items: center;\n    justify-content: space-around;\n    margin:
    auto 30px;\n    flex-wrap: nowrap;\n  }\n\n  .left-col {\n    margin-top: 20px;\n
    \ }\n\n  .brand {\n    flex-shrink: 2;\n  }\n\n  @media all and (max-width: 500px)
    {\n    .logos {\n      /* On small screens, we are no longer using row direction
    but column */\n      /* flex-direction: column; */\n      align-items: center;\n
    \     justify-content: center;\n      flex-wrap: wrap;\n    }\n    .branding img
    {\n      justify-content: center;\n      max-width: 100%;\n    }\n  }\n\n  @media
    (max-width: 767px) {\n    .logos {\n      justify-content: space-around;\n    }\n
    \   .logo {\n      flex-basis: 50%;\n    }\n  }\n\n  @media (max-width: 1400px)
    {\n    .logos {\n      justify-content: space-around;\n    }\n    .main-content
    {\n      width: 100%;\n    }\n  }\n\n  @media (min-width: 1401px) {\n    .main-content
    {\n      width: 1400px;\n    }\n  }\n\n  .sponsors {\n    display: flex;\n    flex-direction:
    row;\n    justify-content: space-evenly;\n  }\n\n  .sponsors-footer {\n    height:
    300px;\n  }\n\n  .sponsor {\n    padding: 10px;\n    max-width: 100%;\n    max-height:
    150px;\n  }\n\n  #login-box {\n    border: 1px solid silver;\n    padding: 10px;\n
    \   margin-bottom: 30px;\n    /*   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0
    6px 20px 0 rgba(0, 0, 0, 0.19);\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0,
    0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    -moz-box-shadow: 0 4px 8px 0 rgba(0,
    0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */\n    border-radius: 5px;\n    flex-grow:
    2;\n  }\n\n  .body {\n    padding-bottom: 50px;\n  }\n\n  #login-main .auth-form-body
    {\n    border-color: rgb(0, 124, 186);\n    color: white;\n  }\n\n  #login-main
    {\n    margin-top: 5%;\n    height: inherit;\n    width: inherit;\n    margin-bottom:
    5%;\n  }\n\n  #login-main .container {\n    width: 50%;\n  }\n\n  footer {\n    border-top:
    1px solid silver;\n    padding: 10px;\n    bottom: 0;\n    position: fixed;\n    width:
    100%;\n  }\n\n  footer p {\n    margin: 0 auto 0 auto;\n    text-align: center;\n
    \ }\n\n  #login-main form {\n    vertical-align: top;\n  }\n\n  #login-main .auth-form-header
    {\n    color: white;\n    background: rgb(219, 170, 0);\n    border: 1px solid;\n
    \   border-color: rgb(0, 124, 186);\n  }\n\n  #insecure-login-warning {\n    color:
    black;\n  }\n\n  .btn-jupyter.active,\n  .btn-jupyter:active,\n  .open>.dropdown-toggle.btn-jupyter
    {\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px #a88400;\n    border-color:
    #a88400;\n    outline-color: #a88400;\n  }\n\n  #login-main .form-control:focus,\n
    \ #login-main input[type=submit]:focus {\n    box-shadow: inset 0 1px 1px rgba(0,
    0, 0, .075), 0 0 8px rgb(219, 170, 0);\n    border-color: rgb(219, 170, 0);\n    outline-color:
    rgb(219, 170, 0);\n  }\n\n  .btn-jupyter {\n    color: #fff;\n    background-color:
    #F37524;\n    border-color: #E34F21;\n    padding: 10px;\n  }\n\n  .col-1 {\n    width:
    8.33%;\n  }\n\n  .col-2 {\n    width: 16.66%;\n  }\n\n  .col-3 {\n    width: 25%;\n
    \ }\n\n  .col-4 {\n    width: 33.33%;\n  }\n\n  .col-5 {\n    width: 41.66%;\n  }\n\n
    \ .col-6 {\n    width: 50%;\n  }\n\n  .col-7 {\n    width: 58.33%;\n  }\n\n  .col-8
    {\n    width: 66.66%;\n  }\n\n  .col-9 {\n    width: 75%;\n  }\n\n  .col-10 {\n
    \   width: 83.33%;\n  }\n\n  .col-11 {\n    width: 91.66%;\n  }\n\n  .col-12 {\n
    \   width: 100%;\n  }\n</style>\n{% endblock %}"
  page.html: "{% extends \"templates/page.html\" %}\n\n{% block nav_bar %}\n  <nav class=\"navbar
    navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n
    \       {% block logo %}\n        <span id=\"jupyterhub-logo\" class=\"pull-left\">\n
    \           <a href=\"{{logo_url or base_url}}\"><img src='{{base_url}}logo' alt='JupyterHub'
    class='jpy-logo' title='Home'/></a>\n        </span>\n        {% endblock %}\n        <button
    type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#thenavbar\"
    aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n
    \         <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n
    \         <span class=\"icon-bar\"></span>\n        </button>\n      </div>\n\n
    \     <div class=\"collapse navbar-collapse\" id=\"thenavbar\">\n        {% if user
    %}\n        <ul class=\"nav navbar-nav\">\n          {% block nav_bar_left_items
    %}\n            <li><a href=\"{{base_url}}home\">Home</a></li>\n            <li><a
    href=\"{{base_url}}token\">Token</a></li>\n            {% if user.admin %}\n            <li><a
    href=\"{{base_url}}admin\">Admin</a></li>\n            {% endif %}\n            {%
    if services %}\n            <li class=\"dropdown\">\n              <a href=\"#\"
    class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"
    aria-expanded=\"false\">Services<span class=\"caret\"></span></a>\n              <ul
    class=\"dropdown-menu\">\n              {% for service in services %}\n                <li><a
    class=\"dropdown-item\" href=\"{{service.prefix}}\">{{service.name}}</a></li>\n
    \             {% endfor %}\n              </ul>\n            </li>\n            {%
    endif %}\n\n            {# Start AiiDAlab specific change #}\n            <li><a
    href=\"{{base_url}}about\">About</a></li>\n            <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \           {# End change #}\n\n          {% endblock %}\n        </ul>\n\n        {#
    Start AiiDAlab specific change #}\n        {% else %}\n        <ul class=\"nav navbar-nav\">\n
    \         <li><a href=\"{{base_url}}about\">About</a></li>\n          <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \       </ul>\n        {# End change #}\n\n        {% endif %}\n        <ul class=\"nav
    navbar-nav navbar-right\">\n          {% block nav_bar_right_items %}\n            <li>\n
    \             {% block login_widget %}\n                <span id=\"login_widget\">\n
    \                 {% if user %}\n\t\t    <p class=\"navbar-text\">{{user.name}}</p>\n
    \                   <a id=\"logout\" role=\"button\" class=\"navbar-btn btn-sm btn
    btn-default\" href=\"{{logout_url}}\"> <i aria-hidden=\"true\" class=\"fa fa-sign-out\"></i>
    Logout</a>\n                  {% else %}\n                    <a id=\"login\" role=\"button\"
    class=\"btn-sm btn navbar-btn btn-default\" href=\"{{login_url}}\">Login</a>\n                  {%
    endif %}\n                </span>\n              {% endblock %}\n            </li>\n
    \         {% endblock %}\n        </ul>\n      </div>\n\n      {% block header %}\n
    \     {% endblock %}\n    </div>\n  </nav>\n{% endblock %}"
  spawn_pending.html: |
    {% extends "templates/spawn_pending.html" %}
  
    {% block message %}
    <p>Your AiiDAlab server is starting up.</p>
    <ul>
        <li>You will be redirected automatically when it's ready for you.</li>
        <li>If you see any error or the procedure takes too long (>1 min), please ask for support.</li>
    </ul>
    {% endblock %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-external
binaryData:
  aiidalab-wide-logo.png: ''
  marvel-cropped-logo.png: ''
  psi-logo.png: ''
  psi-old-logo.svg: 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEiIHdpZHRoPSI0MjAiIGhlaWdodD0iMTUwIj48c3R5bGU+LnN0eWxlMHtmaWxsOiNiZGJhYmE7ZmlsbC1ydWxlOm5vbnplcm99LnN0eWxlMSwuc3R5bGUye3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDo0Ljk2Nzk5OTk0fS5zdHlsZTF7ZmlsbC1ydWxlOm5vbnplcm87ZmlsbDojZmZmfS5zdHlsZTJ7ZmlsbDpub25lfS5zdHlsZTN7ZmlsbDojMDAwfTwvc3R5bGU+PHBhdGggZD0iTTEwMS42IDczLjFIMzQuOGMtMTAuMyAwLTE4LjYgNy4xLTE4LjYgMTUuOXYxNi43YzAgOC44IDguMyAxNS45IDE4LjYgMTUuOWg2Ni44TTMxOS40IDczLjFoNjUuOGMxMC4zIDAgMTguNiA3LjEgMTguNiAxNS45djE2LjdjMCA4LjgtOC4zIDE1LjktMTguNiAxNS45aC02NS45TTE4Ny44IDEyMS41bDIuNS0xNC41LTU2LjktLjEuMiAxNC43IDU0LjItLjF6IiBjbGFzcz0ic3R5bGUwIi8+PHBhdGggZD0iTTE4OC40IDk5LjljMCA0LjgtMy45IDguNy04LjYgOC43aC00Ni4zdjIyLjljMCA0LjgtMy45IDguNy04LjcgOC43aC0xMy40Yy00LjggMC04LjctMy45LTguNy04LjdWNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoNjguNGM0LjcgMCA4LjYgMy45IDguNiA4Ljd2NDUuMnpNMjc0LjYgNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoMjdjNC44IDAgOC43IDMuOSA4LjcgOC43djc2LjhjMCA0LjgtMy45IDguNy04LjcgOC43aC0yN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0Ljd6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTI2NS45IDc3LjRjNC44IDAgOC43IDMuOSA4LjcgOC43djQ1LjRjMCA0LjgtMy45IDguNy04LjcgOC43aC02OC44Yy00LjggMC04LjctMy45LTguNy04Ljd2LTE0LjJjMC00LjggMy45LTguNyA4LjctOC43aDUwLjctNTAuN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0LjdjMC00LjggMy45LTguNyA4LjctOC43aDY4LjhjNC44IDAgOC43IDMuOSA4LjcgOC43djE0LjFjMCA0LjgtMy45IDguNi04LjcgOC42aC01MC4yIDUwLjJ6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTEzMC43IDc3LjRoMjkuNCIgY2xhc3M9InN0eWxlMiIvPjxwYXRoIGQ9Ik0zMy44IDI5LjR2LTkuNmM0LjUuMSA2LjItMS45IDYuMi02LjQgMC01LjUtMy4yLTUuOC01LjctNS44aC0zLjV2MjEuOGgzem0uNC0xOS4zYzIuMSAwIDIuNyAxLjcgMi43IDMuNiAwIDIuNC0uNyAzLjgtMy4xIDMuNnYtNy4yaC40ek01MSA3LjZsLTQuOCAyMS44aDIuOWwuOC00LjJoNC4zbC45IDQuMmgyLjhMNTMuMiA3LjZINTF6bTIuOCAxNS4zaC0zLjVsMS44LTExLjEgMS4xIDggLjYgMy4xek02Ni41IDcuNnYxNS4xYzAgMy45LjUgNy4xIDUgNy4xIDUuMSAwIDUtMy45IDUtNi43VjcuNmgtMi45djE2LjNjMCAxLjktLjEgMy4xLTIuMSAzLjEtMS4yIDAtMi0uNi0yLTMuNHYtMTZoLTN6TTg2LjcgNy42djIxLjhoNy44di0yLjVoLTQuOVY3LjZoLTIuOXpNMTE5LjQgOC4xYy0uOS0uNi0xLjktLjgtMy4xLS44LTMuMiAwLTQuOCAyLjYtNC44IDUuNiAwIDUuNyA2IDYuNiA2IDExIDAgMS42LS43IDMtMi41IDMtMS4xIDAtMi0uNS0yLjgtMS4xdjIuOWMuOC43IDIgMS4xIDMuMSAxLjEgMy4yIDAgNS4yLTIuNyA1LjItNS44IDAtMi45LTEuMi00LjQtMy4yLTYuNGwtMi4xLTIuM2MtLjYtLjgtLjktMS41LS45LTIuNCAwLTEuNSAxLTIuOCAyLjYtMi44IDEgMCAxLjguMyAyLjUuOVY4LjF6TTEzOCA3LjljLS44LS40LTEuNS0uNi0yLjUtLjYtNS45IDAtNi41IDcuMi02LjUgMTEuNiAwIDQuNS44IDEwLjkgNi43IDEwLjkuOSAwIDEuNi0uMiAyLjMtLjd2LTIuNWMtLjUuMy0xLjEuNC0xLjcuNC00IDAtNC4yLTUuNC00LjItOC4zIDAtMi44IDAtOC42IDQuMS04LjYuNiAwIDEuMi4yIDEuOC41VjcuOXpNMTQ2LjkgNy42djIxLjhoM1YxOC42aDQuM3YxMC44aDIuOVY3LjZoLTIuOXY4LjVoLTQuM1Y3LjZoLTN6TTE2Ny4zIDcuNnYyMS44aDcuOHYtMi41aC00Ljl2LTcuNGg0LjNWMTdoLTQuM3YtNi45aDQuOVY3LjZoLTcuOHpNMTg0IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42SDE4NHYyMS44em0yLjktMTIuMXYtNy4yaC41YzIuMS0uMSAyLjQgMS43IDIuNCAzLjcgMCAyLjMtLjggMy42LTIuOSAzLjV6TTIwMi43IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yMjEuNCA3LjZ2MjEuOGg3Ljh2LTIuNWgtNC45di03LjRoNC40VjE3aC00LjR2LTYuOWg0LjlWNy42aC03Ljh6TTIzOC4xIDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yNzAgNy42aC0yLjl2MjEuOGgyLjlWNy42ek0yODIuNSAxMi43bC4xLS4xIDUgMTYuOGgyLjdWNy42aC0yLjl2Ny44bC43IDguN3YuMUwyODMgNy42aC0yLjh2MjEuOGgyLjl2LThsLS40LTcuMy0uMi0xLjR6TTMwNy4zIDguMWMtMS0uNi0yLS44LTMuMS0uOC0zLjIgMC00LjkgMi42LTQuOSA1LjYgMCA1LjcgNi4xIDYuNiA2LjEgMTEgMCAxLjYtLjggMy0yLjUgMy0xLjEgMC0yLS41LTIuOS0xLjF2Mi45Yy45LjcgMi4xIDEuMSAzLjIgMS4xIDMuMiAwIDUuMS0yLjcgNS4xLTUuOCAwLTIuOS0xLjEtNC40LTMuMS02LjRsLTIuMi0yLjNjLS41LS44LS44LTEuNS0uOC0yLjQgMC0xLjUgMS0yLjggMi42LTIuOCAxIDAgMS43LjMgMi41LjlWOC4xek0zMTUuNiA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXpNMzM2LjQgNy42aC0zdjIxLjhoM1Y3LjZ6TTM0NC43IDcuNnYyLjVoMy40djE5LjNoMi45VjEwLjFoMy4yVjcuNmgtOS41ek0zNjIuNiA3LjZ2MTUuMWMwIDMuOS40IDcuMSA1IDcuMSA1IDAgNS0zLjkgNS02LjdWNy42aC0yLjl2MTYuM2MwIDEuOS0uMiAzLjEtMi4yIDMuMS0xLjIgMC0yLS42LTItMy40di0xNmgtMi45ek0zODAuOSA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXoiIGNsYXNzPSJzdHlsZTMiLz48L3N2Zz4='
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-etc-jupyter
data:
  {}

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: autohttps
  apiGroup:
roleRef:
  kind: Role
  name: autohttps
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: production
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8001
      targetPort: api
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: autohttps
    app: jupyterhub
    release: production
  ports:
    - name: https
      port: 443
      # When HTTPS termination is handled outside our helm chart, pass traffic
      # coming in via this Service's port 443 to targeted pod's port meant for
      # HTTP traffic.
      targetPort: https
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer

---
# Source: basehub/templates/users-config.yaml
jupyterhub:
    hub:
        config:
            GitHubOAuthenticator:
                allowed_users:
                                    allowed_users:
                  - superstar54
                  - unkcpz
                  - edan-bainglass
                  - giovannipizzi
                  - t-reents
                  - AndresOrtegaGuerrero
                allow_existing_users: false
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: production
      annotations:
        checksum/config-map: b8f3cecec7a35ee90e436feb3a0882c932ac69bdc34a216c857e70736b6ce89d
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.15
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "production"
    profiles:
      - schedulerName: production-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
        - port: https
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

  egress:
    # autohttps --> proxy (http port)
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"

---
# Source: basehub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: basehub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
        - port: https
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

  egress:
    # autohttps --> proxy (http port)
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: production
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
---
# Source: basehub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "Z0hTMmNFTUFGOFQ0cTlQRXZnSEFTSkR3UjJpV1NPNlZIQjBuMmQ4WGVzQWo4cHVyZG9rZnRnVXBkNGZ5Znp0Mw=="
  hub.config.JupyterHub.cookie_secret: "ZDAwZDM0MjgzYzMxODg0ZTI2YzYwNjIzNTc5YTk0MDAyYmJlOWI2ZjhmMDQ4Y2Y4MTFhYjA1ZDIwYTM2Yjk2Nw=="
  hub.config.CryptKeeper.keys: "YzQ2OWY5OWE0MjRmMjNhNWEyMGE2NzkzNTJiNTdlZDhhNmYxY2FlODFjMzNkZThhNmQzMjUzMDhhNzQ4ZmFhOA=="
---
# Source: basehub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "production-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "production-default-priority"
  user-placeholder-priority: "production-user-placeholder-priority"
  user-scheduler: "production-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
  
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c"
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/configmap.yaml
# This configmap contains Traefik configuration files to be mounted.
# - traefik.yaml will only be read during startup (static configuration)
# - dynamic.yaml will be read on change (dynamic configuration)
#
# ref: https://docs.traefik.io/getting-started/configuration-overview/
#
# The configuration files are first rendered with Helm templating to large YAML
# strings. Then we use the fromYAML function on these strings to get an object,
# that we in turn merge with user provided extra configuration.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  traefik.yaml: |
    accessLog:
      fields:
        headers:
          names:
            Authorization: redacted
            Cookie: redacted
            Set-Cookie: redacted
            X-Xsrftoken: redacted
      filters:
        statusCodes:
        - 500-599
    certificatesResolvers:
      default:
        acme:
          caServer: https://acme-v02.api.letsencrypt.org/directory
          email: aiidalab@materialscloud.org
          httpChallenge:
            entryPoint: http
          storage: /etc/acme/acme.json
    entryPoints:
      http:
        address: :8080
      https:
        address: :8443
        transport:
          respondingTimeouts:
            idleTimeout: 10m0s
    log:
      level: WARN
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
  dynamic.yaml: |
    http:
      middlewares:
        hsts:
          headers:
            stsIncludeSubdomains: false
            stsPreload: false
            stsSeconds: 15724800
        redirect:
          redirectScheme:
            permanent: true
            scheme: https
        scheme:
          headers:
            customRequestHeaders:
              X-Scheme: https
      routers:
        default:
          entrypoints:
          - https
          middlewares:
          - hsts
          - scheme
          rule: PathPrefix(`/`)
          service: default
          tls:
            certResolver: default
            domains:
            - main: psi-tutorial.aiidalab.io
            options: default
        insecure:
          entrypoints:
          - http
          middlewares:
          - redirect
          rule: PathPrefix(`/`)
          service: default
      services:
        default:
          loadBalancer:
            servers:
            - url: http://proxy-http:8000/
    tls:
      options:
        default:
          cipherSuites:
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          minVersion: VersionTLS12
          sniStrict: true
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "production"
    profiles:
      - schedulerName: production-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-templates
data:
  README.md: |-
    # Templates
  
    The templates are adapted from [LibreTexts/jupyterhub-templates](https://github.com/LibreTexts/jupyterhub-templates).
  about.html: |-
    <html>
        <head>
            <title>About Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://www.aiidalab.net/about/" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab about page. If you are not redirected, click <a href="https://www.aiidalab.net/about/">here</a> to go to the page.</p>
       </body>
    </html>
  faq.html: |-
    <html>
        <head>
            <title>FAQ Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab documentation page. If you are not redirected, click <a href="https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page">here</a> to go to the page.</p>
       </body>
    </html>
  login.html: "{% extends \"templates/login.html\" %}\n\n{% block title %}PSI AiiDAlab
    - Login{% endblock %}\n\n<!-- Global site tag (gtag.js) - Google Analytics (comming
    soon) -->\n\n{% block main %}\n\n<div class=\"main-content container\">\n  <div
    class=\"branding\">\n    <div class=\"logos\">\n      <a class=\"logo\" href=\"https://aiidalab.net\"
    target=\"_blank\">\n        <img src=\"/hub/static/external/aiidalab-wide-logo.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n      </a>\n      <a
    class=\"logo\" href=\"https://psi.ch\" target=\"_blank\" style=\"padding:20px;\">\n
    \       <img src=\"/hub/static/external/psi-logo.png\" alt=\"PSI\" style=\"max-height:100px;max-width:100%;\">\n
    \     </a>\n      <a class=\"logo\" href=\"https://www.psi.ch/en/lms\" target=\"_blank\">\n
    \       Laboratory for Materials Simulations (LMS)\n      </a>\n      <a class=\"logo\"
    href=\"http://nccr-marvel.ch/\" target=\"_blank\">\n        <img class=\"sponsor\"
    src=\"/hub/static/external/marvel-cropped-logo.png\" alt=\"NCCR MARVEL\" style=\"max-height:100px;max-width:100%\">\n
    \     </a>\n    </div>\n  </div>\n\n  {% block login %}\n  <div class=\"col-sm-4
    left-col\">\n    <div id=\"login-box\">\n      <h3 align=\"center\">Login to AiiDAlab</h3>\n
    \     <div align=\"center\">\n        <a class=\"logo\" href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">\n          <img src=\"https://indico.psi.ch/event/17436/logo-123289806.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n        </a>\n      </div>\n
    \     {{ super() }}\n    </div>\n\n    <div id=\"sponsor\">\n        <p>\n        <small>\n
    \           This work is or has been supported by the <a href=\"http://nccr-marvel.ch\">MARVEL
    National Centre of Competence in Research</a> and funded by the <a href=\"http://www.snf.ch/en\">Swiss
    National Science Foundation</a>, the MARKETPLACE project funded by <a href=\"https://ec.europa.eu/programmes/horizon2020/\">Horizon
    2020</a> under the H2020-NMBP-25-2017 call (Grant No.&nbsp;760173), as well as by
    the <a href=\"http://www.max-centre.eu/\">MaX European Centre of Excellence</a>
    funded by the Horizon 2020 EINFRA-5 program, Grant No.&nbsp;676598, and other <a
    href=\"https://www.materialscloud.org/home#partners\">Materials Cloud partners</a>.\n
    \       </small>\n        </p>\n    </div>\n    <div id=\"acknowledgement\">\n      <p>\n
    \     <small>\n        We kindly ask you to cite the following publication if you
    use AiiDAlab:\n        <p class=\"reference\">\n            A. V. Yakutovich et
    al., Comp. Mat. Sci. 188, 110165 (2021) <a href=\"https://doi.org/10.1016/j.commatsci.2020.110165\"
    target=\"_blank\">DOI:10.1016/j.commatsci.2020.110165</a>\n        </p>\n      </small>\n
    \     </p>\n    </div>\n\n\n    <div class=\"sponsors row align-items-center justify-content-around
    flex-wrap\"></div>\n  </div>\n  {% endblock login %}\n\n  <div class=\"container
    col-sm-7\">\n    <h1>Welcome to the AiiDAlab deployment for PSI tutorials!</h1>\n
    \   <p>This AiiDAlab server is deployed and maintained by the <a href=\"https://www.psi.ch/en/lms/msd-group\"
    target=\"_blank\">Materials Software and Data Group (MSD)</a> \n      and its aim
    is to serve users during the course <a href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">Electronic-structure simulations for user communities at large-scale
    facilities</a>.</p>\n    <p>The virtual machines used for this course are provided
    by the <a href=\"https://azure.microsoft.com\" target=\"_blank\">Azure cloud service</a>.</p>\n\n
    \   <h2>Login to AiiDAlab</h2>\n    <p>\n      The service is accessible with GitHub
    credentials:\n      <ul>\n        <li>Click on the \"Sign in with GitHub\" button.</li>\n
    \       <li>Authorize the application to access your GitHub account (needed for
    authentication).</li>\n        <li>Once you are logged in, you will be redirected
    to the AiiDAlab home page.</li>\n      </ul>\n    </p>\n\n    <h2 id=\"gettingstartedwithaiidalab\">Getting
    started with AiiDAlab</h2>\n    <p>\n      <a href=\"https://aiidalab.net\" target=\"_blank\">AiiDAlab</a>
    is a web environment to run materials simulation online. \n      It is based on
    <a href=\"https://jupyter.org/index.html\" target=\"_blank\">Jupyter</a> as the
    web backend, and <a href=\"https://aiida.net\" target=\"_blank\">AiiDA</a> as the
    workflow engine.\n    </p>\n\n    <p>Some resources to learn AiiDAlab:</p>\n    <ul>\n
    \     <li>\n        <a href=\"https://aiidalab.readthedocs.io/en/latest/\" target=\"_blank\">Our
    official documentation</a>, for a more detailed introduction and hands on guide.\n
    \     </li>\n      <li>\n        An <a href=\"https://www.youtube.com/watch?v=Oqo5buk6Om8\"
    target=\"_blank\">AiiDAlab introduction</a> video for an overview.\n      </li>\n
    \   </ul>\n\n    <h2>Any questions?</h2>\n    <p>Please checkout our <a href=\"{{base_url}}faq\"
    target=\"_blank\">FAQ</a> page. If you cannot find your question, feel free to <a
    href=\"mailto:miki.bonacci@psi.ch?subject=[Help]%20AiiDAlab PSI&cc=giovanni.pizzi@psi.ch,xing.wang@psi.ch\"
    target=\"_blank\">send an email to the developers</a>. For technical issues, <a
    href=\"https://gitlab.psi.ch/yu_j/aiidalab-psi-deploy/-/issues/new\" target=\"_blank\">open
    an issue on GitLab</a> and we will try to resolve it.</p>\n  </div>\n</div>\n\n{%
    endblock main %}\n\n{% block stylesheet %}\n{{ super() }}\n<style>\n  .main-content
    {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .logos {\n    display:
    flex;\n    align-items: center;\n    justify-content: space-around;\n    margin:
    auto 30px;\n    flex-wrap: nowrap;\n  }\n\n  .left-col {\n    margin-top: 20px;\n
    \ }\n\n  .brand {\n    flex-shrink: 2;\n  }\n\n  @media all and (max-width: 500px)
    {\n    .logos {\n      /* On small screens, we are no longer using row direction
    but column */\n      /* flex-direction: column; */\n      align-items: center;\n
    \     justify-content: center;\n      flex-wrap: wrap;\n    }\n    .branding img
    {\n      justify-content: center;\n      max-width: 100%;\n    }\n  }\n\n  @media
    (max-width: 767px) {\n    .logos {\n      justify-content: space-around;\n    }\n
    \   .logo {\n      flex-basis: 50%;\n    }\n  }\n\n  @media (max-width: 1400px)
    {\n    .logos {\n      justify-content: space-around;\n    }\n    .main-content
    {\n      width: 100%;\n    }\n  }\n\n  @media (min-width: 1401px) {\n    .main-content
    {\n      width: 1400px;\n    }\n  }\n\n  .sponsors {\n    display: flex;\n    flex-direction:
    row;\n    justify-content: space-evenly;\n  }\n\n  .sponsors-footer {\n    height:
    300px;\n  }\n\n  .sponsor {\n    padding: 10px;\n    max-width: 100%;\n    max-height:
    150px;\n  }\n\n  #login-box {\n    border: 1px solid silver;\n    padding: 10px;\n
    \   margin-bottom: 30px;\n    /*   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0
    6px 20px 0 rgba(0, 0, 0, 0.19);\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0,
    0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    -moz-box-shadow: 0 4px 8px 0 rgba(0,
    0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */\n    border-radius: 5px;\n    flex-grow:
    2;\n  }\n\n  .body {\n    padding-bottom: 50px;\n  }\n\n  #login-main .auth-form-body
    {\n    border-color: rgb(0, 124, 186);\n    color: white;\n  }\n\n  #login-main
    {\n    margin-top: 5%;\n    height: inherit;\n    width: inherit;\n    margin-bottom:
    5%;\n  }\n\n  #login-main .container {\n    width: 50%;\n  }\n\n  footer {\n    border-top:
    1px solid silver;\n    padding: 10px;\n    bottom: 0;\n    position: fixed;\n    width:
    100%;\n  }\n\n  footer p {\n    margin: 0 auto 0 auto;\n    text-align: center;\n
    \ }\n\n  #login-main form {\n    vertical-align: top;\n  }\n\n  #login-main .auth-form-header
    {\n    color: white;\n    background: rgb(219, 170, 0);\n    border: 1px solid;\n
    \   border-color: rgb(0, 124, 186);\n  }\n\n  #insecure-login-warning {\n    color:
    black;\n  }\n\n  .btn-jupyter.active,\n  .btn-jupyter:active,\n  .open>.dropdown-toggle.btn-jupyter
    {\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px #a88400;\n    border-color:
    #a88400;\n    outline-color: #a88400;\n  }\n\n  #login-main .form-control:focus,\n
    \ #login-main input[type=submit]:focus {\n    box-shadow: inset 0 1px 1px rgba(0,
    0, 0, .075), 0 0 8px rgb(219, 170, 0);\n    border-color: rgb(219, 170, 0);\n    outline-color:
    rgb(219, 170, 0);\n  }\n\n  .btn-jupyter {\n    color: #fff;\n    background-color:
    #F37524;\n    border-color: #E34F21;\n    padding: 10px;\n  }\n\n  .col-1 {\n    width:
    8.33%;\n  }\n\n  .col-2 {\n    width: 16.66%;\n  }\n\n  .col-3 {\n    width: 25%;\n
    \ }\n\n  .col-4 {\n    width: 33.33%;\n  }\n\n  .col-5 {\n    width: 41.66%;\n  }\n\n
    \ .col-6 {\n    width: 50%;\n  }\n\n  .col-7 {\n    width: 58.33%;\n  }\n\n  .col-8
    {\n    width: 66.66%;\n  }\n\n  .col-9 {\n    width: 75%;\n  }\n\n  .col-10 {\n
    \   width: 83.33%;\n  }\n\n  .col-11 {\n    width: 91.66%;\n  }\n\n  .col-12 {\n
    \   width: 100%;\n  }\n</style>\n{% endblock %}"
  page.html: "{% extends \"templates/page.html\" %}\n\n{% block nav_bar %}\n  <nav class=\"navbar
    navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n
    \       {% block logo %}\n        <span id=\"jupyterhub-logo\" class=\"pull-left\">\n
    \           <a href=\"{{logo_url or base_url}}\"><img src='{{base_url}}logo' alt='JupyterHub'
    class='jpy-logo' title='Home'/></a>\n        </span>\n        {% endblock %}\n        <button
    type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#thenavbar\"
    aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n
    \         <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n
    \         <span class=\"icon-bar\"></span>\n        </button>\n      </div>\n\n
    \     <div class=\"collapse navbar-collapse\" id=\"thenavbar\">\n        {% if user
    %}\n        <ul class=\"nav navbar-nav\">\n          {% block nav_bar_left_items
    %}\n            <li><a href=\"{{base_url}}home\">Home</a></li>\n            <li><a
    href=\"{{base_url}}token\">Token</a></li>\n            {% if user.admin %}\n            <li><a
    href=\"{{base_url}}admin\">Admin</a></li>\n            {% endif %}\n            {%
    if services %}\n            <li class=\"dropdown\">\n              <a href=\"#\"
    class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"
    aria-expanded=\"false\">Services<span class=\"caret\"></span></a>\n              <ul
    class=\"dropdown-menu\">\n              {% for service in services %}\n                <li><a
    class=\"dropdown-item\" href=\"{{service.prefix}}\">{{service.name}}</a></li>\n
    \             {% endfor %}\n              </ul>\n            </li>\n            {%
    endif %}\n\n            {# Start AiiDAlab specific change #}\n            <li><a
    href=\"{{base_url}}about\">About</a></li>\n            <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \           {# End change #}\n\n          {% endblock %}\n        </ul>\n\n        {#
    Start AiiDAlab specific change #}\n        {% else %}\n        <ul class=\"nav navbar-nav\">\n
    \         <li><a href=\"{{base_url}}about\">About</a></li>\n          <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \       </ul>\n        {# End change #}\n\n        {% endif %}\n        <ul class=\"nav
    navbar-nav navbar-right\">\n          {% block nav_bar_right_items %}\n            <li>\n
    \             {% block login_widget %}\n                <span id=\"login_widget\">\n
    \                 {% if user %}\n\t\t    <p class=\"navbar-text\">{{user.name}}</p>\n
    \                   <a id=\"logout\" role=\"button\" class=\"navbar-btn btn-sm btn
    btn-default\" href=\"{{logout_url}}\"> <i aria-hidden=\"true\" class=\"fa fa-sign-out\"></i>
    Logout</a>\n                  {% else %}\n                    <a id=\"login\" role=\"button\"
    class=\"btn-sm btn navbar-btn btn-default\" href=\"{{login_url}}\">Login</a>\n                  {%
    endif %}\n                </span>\n              {% endblock %}\n            </li>\n
    \         {% endblock %}\n        </ul>\n      </div>\n\n      {% block header %}\n
    \     {% endblock %}\n    </div>\n  </nav>\n{% endblock %}"
  spawn_pending.html: |
    {% extends "templates/spawn_pending.html" %}
  
    {% block message %}
    <p>Your AiiDAlab server is starting up.</p>
    <ul>
        <li>You will be redirected automatically when it's ready for you.</li>
        <li>If you see any error or the procedure takes too long (>1 min), please ask for support.</li>
    </ul>
    {% endblock %}
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-external
binaryData:
  aiidalab-wide-logo.png: ''
  marvel-cropped-logo.png: ''
  psi-logo.png: ''
  psi-old-logo.svg: 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEiIHdpZHRoPSI0MjAiIGhlaWdodD0iMTUwIj48c3R5bGU+LnN0eWxlMHtmaWxsOiNiZGJhYmE7ZmlsbC1ydWxlOm5vbnplcm99LnN0eWxlMSwuc3R5bGUye3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDo0Ljk2Nzk5OTk0fS5zdHlsZTF7ZmlsbC1ydWxlOm5vbnplcm87ZmlsbDojZmZmfS5zdHlsZTJ7ZmlsbDpub25lfS5zdHlsZTN7ZmlsbDojMDAwfTwvc3R5bGU+PHBhdGggZD0iTTEwMS42IDczLjFIMzQuOGMtMTAuMyAwLTE4LjYgNy4xLTE4LjYgMTUuOXYxNi43YzAgOC44IDguMyAxNS45IDE4LjYgMTUuOWg2Ni44TTMxOS40IDczLjFoNjUuOGMxMC4zIDAgMTguNiA3LjEgMTguNiAxNS45djE2LjdjMCA4LjgtOC4zIDE1LjktMTguNiAxNS45aC02NS45TTE4Ny44IDEyMS41bDIuNS0xNC41LTU2LjktLjEuMiAxNC43IDU0LjItLjF6IiBjbGFzcz0ic3R5bGUwIi8+PHBhdGggZD0iTTE4OC40IDk5LjljMCA0LjgtMy45IDguNy04LjYgOC43aC00Ni4zdjIyLjljMCA0LjgtMy45IDguNy04LjcgOC43aC0xMy40Yy00LjggMC04LjctMy45LTguNy04LjdWNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoNjguNGM0LjcgMCA4LjYgMy45IDguNiA4Ljd2NDUuMnpNMjc0LjYgNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoMjdjNC44IDAgOC43IDMuOSA4LjcgOC43djc2LjhjMCA0LjgtMy45IDguNy04LjcgOC43aC0yN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0Ljd6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTI2NS45IDc3LjRjNC44IDAgOC43IDMuOSA4LjcgOC43djQ1LjRjMCA0LjgtMy45IDguNy04LjcgOC43aC02OC44Yy00LjggMC04LjctMy45LTguNy04Ljd2LTE0LjJjMC00LjggMy45LTguNyA4LjctOC43aDUwLjctNTAuN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0LjdjMC00LjggMy45LTguNyA4LjctOC43aDY4LjhjNC44IDAgOC43IDMuOSA4LjcgOC43djE0LjFjMCA0LjgtMy45IDguNi04LjcgOC42aC01MC4yIDUwLjJ6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTEzMC43IDc3LjRoMjkuNCIgY2xhc3M9InN0eWxlMiIvPjxwYXRoIGQ9Ik0zMy44IDI5LjR2LTkuNmM0LjUuMSA2LjItMS45IDYuMi02LjQgMC01LjUtMy4yLTUuOC01LjctNS44aC0zLjV2MjEuOGgzem0uNC0xOS4zYzIuMSAwIDIuNyAxLjcgMi43IDMuNiAwIDIuNC0uNyAzLjgtMy4xIDMuNnYtNy4yaC40ek01MSA3LjZsLTQuOCAyMS44aDIuOWwuOC00LjJoNC4zbC45IDQuMmgyLjhMNTMuMiA3LjZINTF6bTIuOCAxNS4zaC0zLjVsMS44LTExLjEgMS4xIDggLjYgMy4xek02Ni41IDcuNnYxNS4xYzAgMy45LjUgNy4xIDUgNy4xIDUuMSAwIDUtMy45IDUtNi43VjcuNmgtMi45djE2LjNjMCAxLjktLjEgMy4xLTIuMSAzLjEtMS4yIDAtMi0uNi0yLTMuNHYtMTZoLTN6TTg2LjcgNy42djIxLjhoNy44di0yLjVoLTQuOVY3LjZoLTIuOXpNMTE5LjQgOC4xYy0uOS0uNi0xLjktLjgtMy4xLS44LTMuMiAwLTQuOCAyLjYtNC44IDUuNiAwIDUuNyA2IDYuNiA2IDExIDAgMS42LS43IDMtMi41IDMtMS4xIDAtMi0uNS0yLjgtMS4xdjIuOWMuOC43IDIgMS4xIDMuMSAxLjEgMy4yIDAgNS4yLTIuNyA1LjItNS44IDAtMi45LTEuMi00LjQtMy4yLTYuNGwtMi4xLTIuM2MtLjYtLjgtLjktMS41LS45LTIuNCAwLTEuNSAxLTIuOCAyLjYtMi44IDEgMCAxLjguMyAyLjUuOVY4LjF6TTEzOCA3LjljLS44LS40LTEuNS0uNi0yLjUtLjYtNS45IDAtNi41IDcuMi02LjUgMTEuNiAwIDQuNS44IDEwLjkgNi43IDEwLjkuOSAwIDEuNi0uMiAyLjMtLjd2LTIuNWMtLjUuMy0xLjEuNC0xLjcuNC00IDAtNC4yLTUuNC00LjItOC4zIDAtMi44IDAtOC42IDQuMS04LjYuNiAwIDEuMi4yIDEuOC41VjcuOXpNMTQ2LjkgNy42djIxLjhoM1YxOC42aDQuM3YxMC44aDIuOVY3LjZoLTIuOXY4LjVoLTQuM1Y3LjZoLTN6TTE2Ny4zIDcuNnYyMS44aDcuOHYtMi41aC00Ljl2LTcuNGg0LjNWMTdoLTQuM3YtNi45aDQuOVY3LjZoLTcuOHpNMTg0IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42SDE4NHYyMS44em0yLjktMTIuMXYtNy4yaC41YzIuMS0uMSAyLjQgMS43IDIuNCAzLjcgMCAyLjMtLjggMy42LTIuOSAzLjV6TTIwMi43IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yMjEuNCA3LjZ2MjEuOGg3Ljh2LTIuNWgtNC45di03LjRoNC40VjE3aC00LjR2LTYuOWg0LjlWNy42aC03Ljh6TTIzOC4xIDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yNzAgNy42aC0yLjl2MjEuOGgyLjlWNy42ek0yODIuNSAxMi43bC4xLS4xIDUgMTYuOGgyLjdWNy42aC0yLjl2Ny44bC43IDguN3YuMUwyODMgNy42aC0yLjh2MjEuOGgyLjl2LThsLS40LTcuMy0uMi0xLjR6TTMwNy4zIDguMWMtMS0uNi0yLS44LTMuMS0uOC0zLjIgMC00LjkgMi42LTQuOSA1LjYgMCA1LjcgNi4xIDYuNiA2LjEgMTEgMCAxLjYtLjggMy0yLjUgMy0xLjEgMC0yLS41LTIuOS0xLjF2Mi45Yy45LjcgMi4xIDEuMSAzLjIgMS4xIDMuMiAwIDUuMS0yLjcgNS4xLTUuOCAwLTIuOS0xLjEtNC40LTMuMS02LjRsLTIuMi0yLjNjLS41LS44LS44LTEuNS0uOC0yLjQgMC0xLjUgMS0yLjggMi42LTIuOCAxIDAgMS43LjMgMi41LjlWOC4xek0zMTUuNiA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXpNMzM2LjQgNy42aC0zdjIxLjhoM1Y3LjZ6TTM0NC43IDcuNnYyLjVoMy40djE5LjNoMi45VjEwLjFoMy4yVjcuNmgtOS41ek0zNjIuNiA3LjZ2MTUuMWMwIDMuOS40IDcuMSA1IDcuMSA1IDAgNS0zLjkgNS02LjdWNy42aC0yLjl2MTYuM2MwIDEuOS0uMiAzLjEtMi4yIDMuMS0xLjIgMC0yLS42LTItMy40di0xNmgtMi45ek0zODAuOSA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXoiIGNsYXNzPSJzdHlsZTMiLz48L3N2Zz4='
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-etc-jupyter
data:
  {}
---
# Source: basehub/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: userpool-storage-production
provisioner: disk.csi.azure.com
parameters:
  skuName: StandardSSD_LRS
  storageaccounttype: StandardSSD_LRS
  kind: Managed
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
reclaimPolicy: Delete
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - switzerlandnorth-1  # Change to switzerlandnorth-2 or switzerlandnorth-3
---
# Source: basehub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  storageClassName: "userpool-storage-production"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "production"
roleRef:
  kind: ClusterRole
  name: production-user-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "list", "create"]
---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "production"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: autohttps
  apiGroup:
roleRef:
  kind: Role
  name: autohttps
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: production
  ports:
    - name: hub
      port: 8081
      targetPort: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-http
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8000
      targetPort: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8001
      targetPort: api
---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: autohttps
    app: jupyterhub
    release: production
  ports:
    - name: https
      port: 443
      # When HTTPS termination is handled outside our helm chart, pass traffic
      # coming in via this Service's port 443 to targeted pod's port meant for
      # HTTP traffic.
      targetPort: https
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 4a3737dc265869bf7c416b95a7509ab6cbbac87919b0bc4699c1c7e7228fbe31
        checksum/secret: b4f2f2a262f921dfd45285768ca062f892ac4a0e4721c63ecb3c37225c8f3662
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - configMap:
            name: hub-templates
          name: hub-templates
        - configMap:
            name: hub-external
          name: hub-external
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.3.8
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /etc/jupyterhub/templates
              name: hub-templates
            - mountPath: /usr/local/share/jupyterhub/static/external
              name: hub-external
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "production"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            httpGet:
              path: /hub/health
              port: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: autohttps
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-http: "true"
      annotations:
        # Only force a restart through a change to this checksum when the static
        # configuration is changed, as the dynamic can be updated after start.
        # Any disruptions to this deployment impacts everything, it is the
        # entrypoint of all network traffic.
        checksum/static-config: a57b3caf3f1a67df6ef444e132303d87f4e4894c3bd1a71826b2933b71ec806a
    spec:
      serviceAccountName: autohttps
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: certificates
          emptyDir: {}
        - name: traefik-config
          configMap:
            name: autohttps
      initContainers:
        - name: load-acme
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - load
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
            # We need this to get logs immediately
            - name: PYTHONUNBUFFERED
              value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: traefik
          image: "traefik:v2.11.0"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: traefik-config
              mountPath: /etc/traefik
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: secret-sync
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - watch-save
            - --label=app=jupyterhub
            - --label=release=production
            - --label=chart=jupyterhub-3.3.8
            - --label=heritage=secret-sync
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
          # We need this to get logs immediately
          - name: PYTHONUNBUFFERED
            value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "69ca"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: production
      annotations:
        checksum/config-map: b8f3cecec7a35ee90e436feb3a0882c932ac69bdc34a216c857e70736b6ce89d
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.15
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: production
    spec:
      schedulerName: production-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              cpu: 1.5
              memory: 6G
            limits:
              cpu: 2
              memory: 6G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/templates/users-config.yaml
jupyterhub:
    hub:
        config:
            GitHubOAuthenticator:
                allowed_users:
                                    Error: 'error unmarshaling JSON: while decoding JSON: json: cannot unmarshal array
                    into Go value of type map[string]interface {}'
                allow_existing_users: false
---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
        - port: https
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

  egress:
    # autohttps --> proxy (http port)
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "91e7"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: production
      annotations:
        checksum/config-map: b8f3cecec7a35ee90e436feb3a0882c932ac69bdc34a216c857e70736b6ce89d
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.15
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "production"
roleRef:
  kind: ClusterRole
  name: production-user-scheduler
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: production
  ports:
    - name: hub
      port: 8081
      targetPort: http

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: production
    spec:
      schedulerName: production-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              cpu: 1.5
              memory: 6G
            limits:
              cpu: 2
              memory: 6G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "production"
    profiles:
      - schedulerName: production-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm

---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "production"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-templates
data:
  README.md: |-
    # Templates
  
    The templates are adapted from [LibreTexts/jupyterhub-templates](https://github.com/LibreTexts/jupyterhub-templates).
  about.html: |-
    <html>
        <head>
            <title>About Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://www.aiidalab.net/about/" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab about page. If you are not redirected, click <a href="https://www.aiidalab.net/about/">here</a> to go to the page.</p>
       </body>
    </html>
  faq.html: |-
    <html>
        <head>
            <title>FAQ Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab documentation page. If you are not redirected, click <a href="https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page">here</a> to go to the page.</p>
       </body>
    </html>
  login.html: "{% extends \"templates/login.html\" %}\n\n{% block title %}PSI AiiDAlab
    - Login{% endblock %}\n\n<!-- Global site tag (gtag.js) - Google Analytics (comming
    soon) -->\n\n{% block main %}\n\n<div class=\"main-content container\">\n  <div
    class=\"branding\">\n    <div class=\"logos\">\n      <a class=\"logo\" href=\"https://aiidalab.net\"
    target=\"_blank\">\n        <img src=\"/hub/static/external/aiidalab-wide-logo.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n      </a>\n      <a
    class=\"logo\" href=\"https://psi.ch\" target=\"_blank\" style=\"padding:20px;\">\n
    \       <img src=\"/hub/static/external/psi-logo.png\" alt=\"PSI\" style=\"max-height:100px;max-width:100%;\">\n
    \     </a>\n      <a class=\"logo\" href=\"https://www.psi.ch/en/lms\" target=\"_blank\">\n
    \       Laboratory for Materials Simulations (LMS)\n      </a>\n      <a class=\"logo\"
    href=\"http://nccr-marvel.ch/\" target=\"_blank\">\n        <img class=\"sponsor\"
    src=\"/hub/static/external/marvel-cropped-logo.png\" alt=\"NCCR MARVEL\" style=\"max-height:100px;max-width:100%\">\n
    \     </a>\n    </div>\n  </div>\n\n  {% block login %}\n  <div class=\"col-sm-4
    left-col\">\n    <div id=\"login-box\">\n      <h3 align=\"center\">Login to AiiDAlab</h3>\n
    \     <div align=\"center\">\n        <a class=\"logo\" href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">\n          <img src=\"https://indico.psi.ch/event/17436/logo-123289806.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n        </a>\n      </div>\n
    \     {{ super() }}\n    </div>\n\n    <div id=\"sponsor\">\n        <p>\n        <small>\n
    \           This work is or has been supported by the <a href=\"http://nccr-marvel.ch\">MARVEL
    National Centre of Competence in Research</a> and funded by the <a href=\"http://www.snf.ch/en\">Swiss
    National Science Foundation</a>, the MARKETPLACE project funded by <a href=\"https://ec.europa.eu/programmes/horizon2020/\">Horizon
    2020</a> under the H2020-NMBP-25-2017 call (Grant No.&nbsp;760173), as well as by
    the <a href=\"http://www.max-centre.eu/\">MaX European Centre of Excellence</a>
    funded by the Horizon 2020 EINFRA-5 program, Grant No.&nbsp;676598, and other <a
    href=\"https://www.materialscloud.org/home#partners\">Materials Cloud partners</a>.\n
    \       </small>\n        </p>\n    </div>\n    <div id=\"acknowledgement\">\n      <p>\n
    \     <small>\n        We kindly ask you to cite the following publication if you
    use AiiDAlab:\n        <p class=\"reference\">\n            A. V. Yakutovich et
    al., Comp. Mat. Sci. 188, 110165 (2021) <a href=\"https://doi.org/10.1016/j.commatsci.2020.110165\"
    target=\"_blank\">DOI:10.1016/j.commatsci.2020.110165</a>\n        </p>\n      </small>\n
    \     </p>\n    </div>\n\n\n    <div class=\"sponsors row align-items-center justify-content-around
    flex-wrap\"></div>\n  </div>\n  {% endblock login %}\n\n  <div class=\"container
    col-sm-7\">\n    <h1>Welcome to the AiiDAlab deployment for PSI tutorials!</h1>\n
    \   <p>This AiiDAlab server is deployed and maintained by the <a href=\"https://www.psi.ch/en/lms/msd-group\"
    target=\"_blank\">Materials Software and Data Group (MSD)</a> \n      and its aim
    is to serve users during the course <a href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">Electronic-structure simulations for user communities at large-scale
    facilities</a>.</p>\n    <p>The virtual machines used for this course are provided
    by the <a href=\"https://azure.microsoft.com\" target=\"_blank\">Azure cloud service</a>.</p>\n\n
    \   <h2>Login to AiiDAlab</h2>\n    <p>\n      The service is accessible with GitHub
    credentials:\n      <ul>\n        <li>Click on the \"Sign in with GitHub\" button.</li>\n
    \       <li>Authorize the application to access your GitHub account (needed for
    authentication).</li>\n        <li>Once you are logged in, you will be redirected
    to the AiiDAlab home page.</li>\n      </ul>\n    </p>\n\n    <h2 id=\"gettingstartedwithaiidalab\">Getting
    started with AiiDAlab</h2>\n    <p>\n      <a href=\"https://aiidalab.net\" target=\"_blank\">AiiDAlab</a>
    is a web environment to run materials simulation online. \n      It is based on
    <a href=\"https://jupyter.org/index.html\" target=\"_blank\">Jupyter</a> as the
    web backend, and <a href=\"https://aiida.net\" target=\"_blank\">AiiDA</a> as the
    workflow engine.\n    </p>\n\n    <p>Some resources to learn AiiDAlab:</p>\n    <ul>\n
    \     <li>\n        <a href=\"https://aiidalab.readthedocs.io/en/latest/\" target=\"_blank\">Our
    official documentation</a>, for a more detailed introduction and hands on guide.\n
    \     </li>\n      <li>\n        An <a href=\"https://www.youtube.com/watch?v=Oqo5buk6Om8\"
    target=\"_blank\">AiiDAlab introduction</a> video for an overview.\n      </li>\n
    \   </ul>\n\n    <h2>Any questions?</h2>\n    <p>Please checkout our <a href=\"{{base_url}}faq\"
    target=\"_blank\">FAQ</a> page. If you cannot find your question, feel free to <a
    href=\"mailto:miki.bonacci@psi.ch?subject=[Help]%20AiiDAlab PSI&cc=giovanni.pizzi@psi.ch,xing.wang@psi.ch\"
    target=\"_blank\">send an email to the developers</a>. For technical issues, <a
    href=\"https://gitlab.psi.ch/yu_j/aiidalab-psi-deploy/-/issues/new\" target=\"_blank\">open
    an issue on GitLab</a> and we will try to resolve it.</p>\n  </div>\n</div>\n\n{%
    endblock main %}\n\n{% block stylesheet %}\n{{ super() }}\n<style>\n  .main-content
    {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .logos {\n    display:
    flex;\n    align-items: center;\n    justify-content: space-around;\n    margin:
    auto 30px;\n    flex-wrap: nowrap;\n  }\n\n  .left-col {\n    margin-top: 20px;\n
    \ }\n\n  .brand {\n    flex-shrink: 2;\n  }\n\n  @media all and (max-width: 500px)
    {\n    .logos {\n      /* On small screens, we are no longer using row direction
    but column */\n      /* flex-direction: column; */\n      align-items: center;\n
    \     justify-content: center;\n      flex-wrap: wrap;\n    }\n    .branding img
    {\n      justify-content: center;\n      max-width: 100%;\n    }\n  }\n\n  @media
    (max-width: 767px) {\n    .logos {\n      justify-content: space-around;\n    }\n
    \   .logo {\n      flex-basis: 50%;\n    }\n  }\n\n  @media (max-width: 1400px)
    {\n    .logos {\n      justify-content: space-around;\n    }\n    .main-content
    {\n      width: 100%;\n    }\n  }\n\n  @media (min-width: 1401px) {\n    .main-content
    {\n      width: 1400px;\n    }\n  }\n\n  .sponsors {\n    display: flex;\n    flex-direction:
    row;\n    justify-content: space-evenly;\n  }\n\n  .sponsors-footer {\n    height:
    300px;\n  }\n\n  .sponsor {\n    padding: 10px;\n    max-width: 100%;\n    max-height:
    150px;\n  }\n\n  #login-box {\n    border: 1px solid silver;\n    padding: 10px;\n
    \   margin-bottom: 30px;\n    /*   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0
    6px 20px 0 rgba(0, 0, 0, 0.19);\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0,
    0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    -moz-box-shadow: 0 4px 8px 0 rgba(0,
    0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */\n    border-radius: 5px;\n    flex-grow:
    2;\n  }\n\n  .body {\n    padding-bottom: 50px;\n  }\n\n  #login-main .auth-form-body
    {\n    border-color: rgb(0, 124, 186);\n    color: white;\n  }\n\n  #login-main
    {\n    margin-top: 5%;\n    height: inherit;\n    width: inherit;\n    margin-bottom:
    5%;\n  }\n\n  #login-main .container {\n    width: 50%;\n  }\n\n  footer {\n    border-top:
    1px solid silver;\n    padding: 10px;\n    bottom: 0;\n    position: fixed;\n    width:
    100%;\n  }\n\n  footer p {\n    margin: 0 auto 0 auto;\n    text-align: center;\n
    \ }\n\n  #login-main form {\n    vertical-align: top;\n  }\n\n  #login-main .auth-form-header
    {\n    color: white;\n    background: rgb(219, 170, 0);\n    border: 1px solid;\n
    \   border-color: rgb(0, 124, 186);\n  }\n\n  #insecure-login-warning {\n    color:
    black;\n  }\n\n  .btn-jupyter.active,\n  .btn-jupyter:active,\n  .open>.dropdown-toggle.btn-jupyter
    {\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px #a88400;\n    border-color:
    #a88400;\n    outline-color: #a88400;\n  }\n\n  #login-main .form-control:focus,\n
    \ #login-main input[type=submit]:focus {\n    box-shadow: inset 0 1px 1px rgba(0,
    0, 0, .075), 0 0 8px rgb(219, 170, 0);\n    border-color: rgb(219, 170, 0);\n    outline-color:
    rgb(219, 170, 0);\n  }\n\n  .btn-jupyter {\n    color: #fff;\n    background-color:
    #F37524;\n    border-color: #E34F21;\n    padding: 10px;\n  }\n\n  .col-1 {\n    width:
    8.33%;\n  }\n\n  .col-2 {\n    width: 16.66%;\n  }\n\n  .col-3 {\n    width: 25%;\n
    \ }\n\n  .col-4 {\n    width: 33.33%;\n  }\n\n  .col-5 {\n    width: 41.66%;\n  }\n\n
    \ .col-6 {\n    width: 50%;\n  }\n\n  .col-7 {\n    width: 58.33%;\n  }\n\n  .col-8
    {\n    width: 66.66%;\n  }\n\n  .col-9 {\n    width: 75%;\n  }\n\n  .col-10 {\n
    \   width: 83.33%;\n  }\n\n  .col-11 {\n    width: 91.66%;\n  }\n\n  .col-12 {\n
    \   width: 100%;\n  }\n</style>\n{% endblock %}"
  page.html: "{% extends \"templates/page.html\" %}\n\n{% block nav_bar %}\n  <nav class=\"navbar
    navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n
    \       {% block logo %}\n        <span id=\"jupyterhub-logo\" class=\"pull-left\">\n
    \           <a href=\"{{logo_url or base_url}}\"><img src='{{base_url}}logo' alt='JupyterHub'
    class='jpy-logo' title='Home'/></a>\n        </span>\n        {% endblock %}\n        <button
    type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#thenavbar\"
    aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n
    \         <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n
    \         <span class=\"icon-bar\"></span>\n        </button>\n      </div>\n\n
    \     <div class=\"collapse navbar-collapse\" id=\"thenavbar\">\n        {% if user
    %}\n        <ul class=\"nav navbar-nav\">\n          {% block nav_bar_left_items
    %}\n            <li><a href=\"{{base_url}}home\">Home</a></li>\n            <li><a
    href=\"{{base_url}}token\">Token</a></li>\n            {% if user.admin %}\n            <li><a
    href=\"{{base_url}}admin\">Admin</a></li>\n            {% endif %}\n            {%
    if services %}\n            <li class=\"dropdown\">\n              <a href=\"#\"
    class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"
    aria-expanded=\"false\">Services<span class=\"caret\"></span></a>\n              <ul
    class=\"dropdown-menu\">\n              {% for service in services %}\n                <li><a
    class=\"dropdown-item\" href=\"{{service.prefix}}\">{{service.name}}</a></li>\n
    \             {% endfor %}\n              </ul>\n            </li>\n            {%
    endif %}\n\n            {# Start AiiDAlab specific change #}\n            <li><a
    href=\"{{base_url}}about\">About</a></li>\n            <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \           {# End change #}\n\n          {% endblock %}\n        </ul>\n\n        {#
    Start AiiDAlab specific change #}\n        {% else %}\n        <ul class=\"nav navbar-nav\">\n
    \         <li><a href=\"{{base_url}}about\">About</a></li>\n          <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \       </ul>\n        {# End change #}\n\n        {% endif %}\n        <ul class=\"nav
    navbar-nav navbar-right\">\n          {% block nav_bar_right_items %}\n            <li>\n
    \             {% block login_widget %}\n                <span id=\"login_widget\">\n
    \                 {% if user %}\n\t\t    <p class=\"navbar-text\">{{user.name}}</p>\n
    \                   <a id=\"logout\" role=\"button\" class=\"navbar-btn btn-sm btn
    btn-default\" href=\"{{logout_url}}\"> <i aria-hidden=\"true\" class=\"fa fa-sign-out\"></i>
    Logout</a>\n                  {% else %}\n                    <a id=\"login\" role=\"button\"
    class=\"btn-sm btn navbar-btn btn-default\" href=\"{{login_url}}\">Login</a>\n                  {%
    endif %}\n                </span>\n              {% endblock %}\n            </li>\n
    \         {% endblock %}\n        </ul>\n      </div>\n\n      {% block header %}\n
    \     {% endblock %}\n    </div>\n  </nav>\n{% endblock %}"
  spawn_pending.html: |
    {% extends "templates/spawn_pending.html" %}
  
    {% block message %}
    <p>Your AiiDAlab server is starting up.</p>
    <ul>
        <li>You will be redirected automatically when it's ready for you.</li>
        <li>If you see any error or the procedure takes too long (>1 min), please ask for support.</li>
    </ul>
    {% endblock %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-external
binaryData:
  aiidalab-wide-logo.png: ''
  marvel-cropped-logo.png: ''
  psi-logo.png: ''
  psi-old-logo.svg: 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEiIHdpZHRoPSI0MjAiIGhlaWdodD0iMTUwIj48c3R5bGU+LnN0eWxlMHtmaWxsOiNiZGJhYmE7ZmlsbC1ydWxlOm5vbnplcm99LnN0eWxlMSwuc3R5bGUye3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDo0Ljk2Nzk5OTk0fS5zdHlsZTF7ZmlsbC1ydWxlOm5vbnplcm87ZmlsbDojZmZmfS5zdHlsZTJ7ZmlsbDpub25lfS5zdHlsZTN7ZmlsbDojMDAwfTwvc3R5bGU+PHBhdGggZD0iTTEwMS42IDczLjFIMzQuOGMtMTAuMyAwLTE4LjYgNy4xLTE4LjYgMTUuOXYxNi43YzAgOC44IDguMyAxNS45IDE4LjYgMTUuOWg2Ni44TTMxOS40IDczLjFoNjUuOGMxMC4zIDAgMTguNiA3LjEgMTguNiAxNS45djE2LjdjMCA4LjgtOC4zIDE1LjktMTguNiAxNS45aC02NS45TTE4Ny44IDEyMS41bDIuNS0xNC41LTU2LjktLjEuMiAxNC43IDU0LjItLjF6IiBjbGFzcz0ic3R5bGUwIi8+PHBhdGggZD0iTTE4OC40IDk5LjljMCA0LjgtMy45IDguNy04LjYgOC43aC00Ni4zdjIyLjljMCA0LjgtMy45IDguNy04LjcgOC43aC0xMy40Yy00LjggMC04LjctMy45LTguNy04LjdWNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoNjguNGM0LjcgMCA4LjYgMy45IDguNiA4Ljd2NDUuMnpNMjc0LjYgNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoMjdjNC44IDAgOC43IDMuOSA4LjcgOC43djc2LjhjMCA0LjgtMy45IDguNy04LjcgOC43aC0yN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0Ljd6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTI2NS45IDc3LjRjNC44IDAgOC43IDMuOSA4LjcgOC43djQ1LjRjMCA0LjgtMy45IDguNy04LjcgOC43aC02OC44Yy00LjggMC04LjctMy45LTguNy04Ljd2LTE0LjJjMC00LjggMy45LTguNyA4LjctOC43aDUwLjctNTAuN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0LjdjMC00LjggMy45LTguNyA4LjctOC43aDY4LjhjNC44IDAgOC43IDMuOSA4LjcgOC43djE0LjFjMCA0LjgtMy45IDguNi04LjcgOC42aC01MC4yIDUwLjJ6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTEzMC43IDc3LjRoMjkuNCIgY2xhc3M9InN0eWxlMiIvPjxwYXRoIGQ9Ik0zMy44IDI5LjR2LTkuNmM0LjUuMSA2LjItMS45IDYuMi02LjQgMC01LjUtMy4yLTUuOC01LjctNS44aC0zLjV2MjEuOGgzem0uNC0xOS4zYzIuMSAwIDIuNyAxLjcgMi43IDMuNiAwIDIuNC0uNyAzLjgtMy4xIDMuNnYtNy4yaC40ek01MSA3LjZsLTQuOCAyMS44aDIuOWwuOC00LjJoNC4zbC45IDQuMmgyLjhMNTMuMiA3LjZINTF6bTIuOCAxNS4zaC0zLjVsMS44LTExLjEgMS4xIDggLjYgMy4xek02Ni41IDcuNnYxNS4xYzAgMy45LjUgNy4xIDUgNy4xIDUuMSAwIDUtMy45IDUtNi43VjcuNmgtMi45djE2LjNjMCAxLjktLjEgMy4xLTIuMSAzLjEtMS4yIDAtMi0uNi0yLTMuNHYtMTZoLTN6TTg2LjcgNy42djIxLjhoNy44di0yLjVoLTQuOVY3LjZoLTIuOXpNMTE5LjQgOC4xYy0uOS0uNi0xLjktLjgtMy4xLS44LTMuMiAwLTQuOCAyLjYtNC44IDUuNiAwIDUuNyA2IDYuNiA2IDExIDAgMS42LS43IDMtMi41IDMtMS4xIDAtMi0uNS0yLjgtMS4xdjIuOWMuOC43IDIgMS4xIDMuMSAxLjEgMy4yIDAgNS4yLTIuNyA1LjItNS44IDAtMi45LTEuMi00LjQtMy4yLTYuNGwtMi4xLTIuM2MtLjYtLjgtLjktMS41LS45LTIuNCAwLTEuNSAxLTIuOCAyLjYtMi44IDEgMCAxLjguMyAyLjUuOVY4LjF6TTEzOCA3LjljLS44LS40LTEuNS0uNi0yLjUtLjYtNS45IDAtNi41IDcuMi02LjUgMTEuNiAwIDQuNS44IDEwLjkgNi43IDEwLjkuOSAwIDEuNi0uMiAyLjMtLjd2LTIuNWMtLjUuMy0xLjEuNC0xLjcuNC00IDAtNC4yLTUuNC00LjItOC4zIDAtMi44IDAtOC42IDQuMS04LjYuNiAwIDEuMi4yIDEuOC41VjcuOXpNMTQ2LjkgNy42djIxLjhoM1YxOC42aDQuM3YxMC44aDIuOVY3LjZoLTIuOXY4LjVoLTQuM1Y3LjZoLTN6TTE2Ny4zIDcuNnYyMS44aDcuOHYtMi41aC00Ljl2LTcuNGg0LjNWMTdoLTQuM3YtNi45aDQuOVY3LjZoLTcuOHpNMTg0IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42SDE4NHYyMS44em0yLjktMTIuMXYtNy4yaC41YzIuMS0uMSAyLjQgMS43IDIuNCAzLjcgMCAyLjMtLjggMy42LTIuOSAzLjV6TTIwMi43IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yMjEuNCA3LjZ2MjEuOGg3Ljh2LTIuNWgtNC45di03LjRoNC40VjE3aC00LjR2LTYuOWg0LjlWNy42aC03Ljh6TTIzOC4xIDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yNzAgNy42aC0yLjl2MjEuOGgyLjlWNy42ek0yODIuNSAxMi43bC4xLS4xIDUgMTYuOGgyLjdWNy42aC0yLjl2Ny44bC43IDguN3YuMUwyODMgNy42aC0yLjh2MjEuOGgyLjl2LThsLS40LTcuMy0uMi0xLjR6TTMwNy4zIDguMWMtMS0uNi0yLS44LTMuMS0uOC0zLjIgMC00LjkgMi42LTQuOSA1LjYgMCA1LjcgNi4xIDYuNiA2LjEgMTEgMCAxLjYtLjggMy0yLjUgMy0xLjEgMC0yLS41LTIuOS0xLjF2Mi45Yy45LjcgMi4xIDEuMSAzLjIgMS4xIDMuMiAwIDUuMS0yLjcgNS4xLTUuOCAwLTIuOS0xLjEtNC40LTMuMS02LjRsLTIuMi0yLjNjLS41LS44LS44LTEuNS0uOC0yLjQgMC0xLjUgMS0yLjggMi42LTIuOCAxIDAgMS43LjMgMi41LjlWOC4xek0zMTUuNiA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXpNMzM2LjQgNy42aC0zdjIxLjhoM1Y3LjZ6TTM0NC43IDcuNnYyLjVoMy40djE5LjNoMi45VjEwLjFoMy4yVjcuNmgtOS41ek0zNjIuNiA3LjZ2MTUuMWMwIDMuOS40IDcuMSA1IDcuMSA1IDAgNS0zLjkgNS02LjdWNy42aC0yLjl2MTYuM2MwIDEuOS0uMiAzLjEtMi4yIDMuMS0xLjIgMC0yLS42LTItMy40di0xNmgtMi45ek0zODAuOSA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXoiIGNsYXNzPSJzdHlsZTMiLz48L3N2Zz4='
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-etc-jupyter
data:
  {}

---
# Source: basehub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 4a3737dc265869bf7c416b95a7509ab6cbbac87919b0bc4699c1c7e7228fbe31
        checksum/secret: 078d7e236cd59204dca0677423c816aa57963036016e596c81930f726e0960c3
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - configMap:
            name: hub-templates
          name: hub-templates
        - configMap:
            name: hub-external
          name: hub-external
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.3.8
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /etc/jupyterhub/templates
              name: hub-templates
            - mountPath: /usr/local/share/jupyterhub/static/external
              name: hub-external
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "production"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            httpGet:
              path: /hub/health
              port: http

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/configmap.yaml
# This configmap contains Traefik configuration files to be mounted.
# - traefik.yaml will only be read during startup (static configuration)
# - dynamic.yaml will be read on change (dynamic configuration)
#
# ref: https://docs.traefik.io/getting-started/configuration-overview/
#
# The configuration files are first rendered with Helm templating to large YAML
# strings. Then we use the fromYAML function on these strings to get an object,
# that we in turn merge with user provided extra configuration.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  traefik.yaml: |
    accessLog:
      fields:
        headers:
          names:
            Authorization: redacted
            Cookie: redacted
            Set-Cookie: redacted
            X-Xsrftoken: redacted
      filters:
        statusCodes:
        - 500-599
    certificatesResolvers:
      default:
        acme:
          caServer: https://acme-v02.api.letsencrypt.org/directory
          email: aiidalab@materialscloud.org
          httpChallenge:
            entryPoint: http
          storage: /etc/acme/acme.json
    entryPoints:
      http:
        address: :8080
      https:
        address: :8443
        transport:
          respondingTimeouts:
            idleTimeout: 10m0s
    log:
      level: WARN
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
  dynamic.yaml: |
    http:
      middlewares:
        hsts:
          headers:
            stsIncludeSubdomains: false
            stsPreload: false
            stsSeconds: 15724800
        redirect:
          redirectScheme:
            permanent: true
            scheme: https
        scheme:
          headers:
            customRequestHeaders:
              X-Scheme: https
      routers:
        default:
          entrypoints:
          - https
          middlewares:
          - hsts
          - scheme
          rule: PathPrefix(`/`)
          service: default
          tls:
            certResolver: default
            domains:
            - main: psi-tutorial.aiidalab.io
            options: default
        insecure:
          entrypoints:
          - http
          middlewares:
          - redirect
          rule: PathPrefix(`/`)
          service: default
      services:
        default:
          loadBalancer:
            servers:
            - url: http://proxy-http:8000/
    tls:
      options:
        default:
          cipherSuites:
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          minVersion: VersionTLS12
          sniStrict: true

---
# Source: basehub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: production
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: autohttps
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-http: "true"
      annotations:
        # Only force a restart through a change to this checksum when the static
        # configuration is changed, as the dynamic can be updated after start.
        # Any disruptions to this deployment impacts everything, it is the
        # entrypoint of all network traffic.
        checksum/static-config: a57b3caf3f1a67df6ef444e132303d87f4e4894c3bd1a71826b2933b71ec806a
    spec:
      serviceAccountName: autohttps
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: certificates
          emptyDir: {}
        - name: traefik-config
          configMap:
            name: autohttps
      initContainers:
        - name: load-acme
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - load
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
            # We need this to get logs immediately
            - name: PYTHONUNBUFFERED
              value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: traefik
          image: "traefik:v2.11.0"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: traefik-config
              mountPath: /etc/traefik
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: secret-sync
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - watch-save
            - --label=app=jupyterhub
            - --label=release=production
            - --label=chart=jupyterhub-3.3.8
            - --label=heritage=secret-sync
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
          # We need this to get logs immediately
          - name: PYTHONUNBUFFERED
            value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8001
      targetPort: api
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: autohttps
    app: jupyterhub
    release: production
  ports:
    - name: https
      port: 443
      # When HTTPS termination is handled outside our helm chart, pass traffic
      # coming in via this Service's port 443 to targeted pod's port meant for
      # HTTP traffic.
      targetPort: https
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer

---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  storageClassName: "userpool-storage-production"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"

---
# Source: basehub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32

---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production

---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"

---
# Source: basehub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "production-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "production-default-priority"
  user-placeholder-priority: "production-user-placeholder-priority"
  user-scheduler: "production-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
  
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c"

---
# Source: basehub/templates/users-config.yaml
jupyterhub:
    hub:
        config:
            GitHubOAuthenticator:
                allowed_users:
                                    allowed_users:
                  - superstar54
                  - unkcpz
                  - edan-bainglass
                  - giovannipizzi
                  - t-reents
                  - AndresOrtegaGuerrero
                allow_existing_users: false
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "list", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: autohttps
  apiGroup:
roleRef:
  kind: Role
  name: autohttps
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io

---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534

---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-http
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8000
      targetPort: http

---
# Source: basehub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "WlhzREtzVGdyRE8wZ0k5WVc5Mm9jRVVtczdEblYxNHJUWUVNOWFkdmR1amNRZHFNUzRtQnQ3Nko1dmFRSUhYaw=="
  hub.config.JupyterHub.cookie_secret: "MmE3NjNjMzk1ZjkxMDYzODhiNWRlZGQxZWU5MTU2ZjcwZmI1MTM1ZTQ4ZmEzMTNmZGM3ZTQ1ODI3NGVkZGE5ZA=="
  hub.config.CryptKeeper.keys: "ODE2NDNlMGExNDI3MDlhY2ZhZWQ2NjBkZWJlOWVkNTMwMTIxYWQyZTIzNjU1YWQzZjQ1MWUzNWU2NTJlNmU2ZQ=="

---
# Source: basehub/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: userpool-storage-production
provisioner: disk.csi.azure.com
parameters:
  skuName: StandardSSD_LRS
  storageaccounttype: StandardSSD_LRS
  kind: Managed
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
reclaimPolicy: Delete
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - switzerlandnorth-1  # Change to switzerlandnorth-2 or switzerlandnorth-3
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: basehub/charts/jupyterhub/templates/hub/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-hub) --> hub
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-hub: "true"

  egress:
    # hub --> proxy
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8001

    # hub --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
        - port: https
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

  egress:
    # autohttps --> proxy (http port)
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/proxy/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:
    # allow incoming traffic to these ports independent of source
    - ports:
      - port: http
      - port: https

    # allowed pods (hub.jupyter.org/network-access-proxy-http) --> proxy (http/https port)
    - ports:
        - port: http
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-http: "true"

    # allowed pods (hub.jupyter.org/network-access-proxy-api) --> proxy (api port)
    - ports:
        - port: api
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-proxy-api: "true"

  egress:
    # proxy --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # proxy --> singleuser-server
    - to:
        - podSelector:
            matchLabels:
              component: singleuser-server
              app: jupyterhub
              release: production
      ports:
        - port: 8888
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
    # Allow outbound connections to private IP ranges
    - to:
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to the cloud metadata server
    - to:
        - ipBlock:
            cidr: 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/singleuser/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: singleuser
  labels:
    component: singleuser
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podSelector:
    matchLabels:
      component: singleuser-server
      app: jupyterhub
      release: production
  policyTypes:
    - Ingress
    - Egress

  # IMPORTANT:
  # NetworkPolicy's ingress "from" and egress "to" rule specifications require
  # great attention to detail. A quick summary is:
  #
  # 1. You can provide "from"/"to" rules that provide access either ports or a
  #    subset of ports.
  # 2. You can for each "from"/"to" rule provide any number of
  #    "sources"/"destinations" of four different kinds.
  #    - podSelector                        - targets pods with a certain label in the same namespace as the NetworkPolicy
  #    - namespaceSelector                  - targets all pods running in namespaces with a certain label
  #    - namespaceSelector and podSelector  - targets pods with a certain label running in namespaces with a certain label
  #    - ipBlock                            - targets network traffic from/to a set of IP address ranges
  #
  # Read more at: https://kubernetes.io/docs/concepts/services-networking/network-policies/#behavior-of-to-and-from-selectors
  #
  ingress:

    # allowed pods (hub.jupyter.org/network-access-singleuser) --> singleuser-server
    - ports:
        - port: notebook-port
      from:
        # source 1 - labeled pods
        - podSelector:
            matchLabels:
              hub.jupyter.org/network-access-singleuser: "true"

  egress:
    # singleuser-server --> hub
    - to:
        - podSelector:
            matchLabels:
              component: hub
              app: jupyterhub
              release: production
      ports:
        - port: 8081

    # singleuser-server --> proxy
    # singleuser-server --> autohttps
    #
    # While not critical for core functionality, a user or library code may rely
    # on communicating with the proxy or autohttps pods via a k8s Service it can
    # detected from well known environment variables.
    #
    - to:
        - podSelector:
            matchLabels:
              component: proxy
              app: jupyterhub
              release: production
      ports:
        - port: 8000
    - to:
        - podSelector:
            matchLabels:
              component: autohttps
              app: jupyterhub
              release: production
      ports:
        - port: 8080
        - port: 8443
    
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        # Allow outbound connections to DNS ports on the cloud metadata server
        - ipBlock:
            cidr: 169.254.169.254/32
        # Allow outbound connections to DNS ports on pods in the kube-system
        # namespace
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
        # Allow outbound connections to DNS ports on destinations in the private IP
        # ranges
        - ipBlock:
            cidr: 10.0.0.0/8
        - ipBlock:
            cidr: 172.16.0.0/12
        - ipBlock:
            cidr: 192.168.0.0/16
    # Allow outbound connections to non-private IP ranges
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              # As part of this rule:
              # - don't allow outbound connections to private IPs
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
              # - don't allow outbound connections to the cloud metadata server
              - 169.254.169.254/32
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  minAvailable: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
---
# Source: basehub/charts/jupyterhub/templates/hub/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
---
# Source: basehub/charts/jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "dnNTYm1QcDhhRFczamEyUVVieHh3WUxOclN4SUxPaXZPRGo3RWl2T3hQU1ZVOExmY0JEVnRDNkZuODF3cTFENQ=="
  hub.config.JupyterHub.cookie_secret: "YjI4NzVlZGY2N2VjZWVmOWU2MWUxZDMxZjIzZDlhMzhhZDIyZjFhODgwYjY1NzY5MTI1MjZhNTYwMzg3YTA3Nw=="
  hub.config.CryptKeeper.keys: "ZjkyZDFkOGEyYWZlODQxM2UwZTljNTJmZjk0ZTI0NDI0MjcwNWQ5ODg0NDdmYTBkMjk1M2NkOGRlYTY1MDMwMA=="
---
# Source: basehub/charts/jupyterhub/templates/hub/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  fullname: ""
  fullname-dash: ""
  hub: "hub"
  hub-serviceaccount: "hub"
  hub-existing-secret: ""
  hub-existing-secret-or-default: "hub"
  hub-pvc: "hub-db-dir"
  proxy: "proxy"
  proxy-api: "proxy-api"
  proxy-http: "proxy-http"
  proxy-public: "proxy-public"
  proxy-public-tls: "proxy-public-tls-acme"
  proxy-public-manual-tls: "proxy-public-manual-tls"
  autohttps: "autohttps"
  autohttps-serviceaccount: "autohttps"
  user-scheduler-deploy: "user-scheduler"
  user-scheduler-serviceaccount: "user-scheduler"
  user-scheduler-lock: "user-scheduler-lock"
  user-placeholder: "user-placeholder"
  image-puller-priority: "production-image-puller-priority"
  hook-image-awaiter: "hook-image-awaiter"
  hook-image-awaiter-serviceaccount: "hook-image-awaiter"
  hook-image-puller: "hook-image-puller"
  continuous-image-puller: "continuous-image-puller"
  singleuser: "singleuser"
  image-pull-secret: "image-pull-secret"
  ingress: "jupyterhub"
  priority: "production-default-priority"
  user-placeholder-priority: "production-user-placeholder-priority"
  user-scheduler: "production-user-scheduler"
  jupyterhub_config.py: |
    # load the config object (satisfies linters)
    c = get_config()  # noqa
  
    import glob
    import os
    import re
    import sys
  
    from jupyterhub.utils import url_path_join
    from kubernetes_asyncio import client
    from tornado.httpclient import AsyncHTTPClient
  
    # Make sure that modules placed in the same directory as the jupyterhub config are added to the pythonpath
    configuration_directory = os.path.dirname(os.path.realpath(__file__))
    sys.path.insert(0, configuration_directory)
  
    from z2jh import (
        get_config,
        get_name,
        get_name_env,
        get_secret_value,
        set_config_if_not_none,
    )
  
  
    def camelCaseify(s):
        """convert snake_case to camelCase
  
        For the common case where some_value is set from someValue
        so we don't have to specify the name twice.
        """
        return re.sub(r"_([a-z])", lambda m: m.group(1).upper(), s)
  
  
    # Configure JupyterHub to use the curl backend for making HTTP requests,
    # rather than the pure-python implementations. The default one starts
    # being too slow to make a large number of requests to the proxy API
    # at the rate required.
    AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
  
    c.JupyterHub.spawner_class = "kubespawner.KubeSpawner"
  
    # Connect to a proxy running in a different pod. Note that *_SERVICE_*
    # environment variables are set by Kubernetes for Services
    c.ConfigurableHTTPProxy.api_url = (
        f'http://{get_name("proxy-api")}:{get_name_env("proxy-api", "_SERVICE_PORT")}'
    )
    c.ConfigurableHTTPProxy.should_start = False
  
    # Do not shut down user pods when hub is restarted
    c.JupyterHub.cleanup_servers = False
  
    # Check that the proxy has routes appropriately setup
    c.JupyterHub.last_activity_interval = 60
  
    # Don't wait at all before redirecting a spawning user to the progress page
    c.JupyterHub.tornado_settings = {
        "slow_spawn_timeout": 0,
    }
  
  
    # configure the hub db connection
    db_type = get_config("hub.db.type")
    if db_type == "sqlite-pvc":
        c.JupyterHub.db_url = "sqlite:///jupyterhub.sqlite"
    elif db_type == "sqlite-memory":
        c.JupyterHub.db_url = "sqlite://"
    else:
        set_config_if_not_none(c.JupyterHub, "db_url", "hub.db.url")
    db_password = get_secret_value("hub.db.password", None)
    if db_password is not None:
        if db_type == "mysql":
            os.environ["MYSQL_PWD"] = db_password
        elif db_type == "postgres":
            os.environ["PGPASSWORD"] = db_password
        else:
            print(f"Warning: hub.db.password is ignored for hub.db.type={db_type}")
  
  
    # c.JupyterHub configuration from Helm chart's configmap
    for trait, cfg_key in (
        ("concurrent_spawn_limit", None),
        ("active_server_limit", None),
        ("base_url", None),
        ("allow_named_servers", None),
        ("named_server_limit_per_user", None),
        ("authenticate_prometheus", None),
        ("redirect_to_server", None),
        ("shutdown_on_logout", None),
        ("template_paths", None),
        ("template_vars", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.JupyterHub, trait, "hub." + cfg_key)
  
    # hub_bind_url configures what the JupyterHub process within the hub pod's
    # container should listen to.
    hub_container_port = 8081
    c.JupyterHub.hub_bind_url = f"http://:{hub_container_port}"
  
    # hub_connect_url is the URL for connecting to the hub for use by external
    # JupyterHub services such as the proxy. Note that *_SERVICE_* environment
    # variables are set by Kubernetes for Services.
    c.JupyterHub.hub_connect_url = (
        f'http://{get_name("hub")}:{get_name_env("hub", "_SERVICE_PORT")}'
    )
  
    # implement common labels
    # this duplicates the jupyterhub.commonLabels helper
    common_labels = c.KubeSpawner.common_labels = {}
    common_labels["app"] = get_config(
        "nameOverride",
        default=get_config("Chart.Name", "jupyterhub"),
    )
    common_labels["heritage"] = "jupyterhub"
    chart_name = get_config("Chart.Name")
    chart_version = get_config("Chart.Version")
    if chart_name and chart_version:
        common_labels["chart"] = "{}-{}".format(
            chart_name,
            chart_version.replace("+", "_"),
        )
    release = get_config("Release.Name")
    if release:
        common_labels["release"] = release
  
    c.KubeSpawner.namespace = os.environ.get("POD_NAMESPACE", "default")
  
    # Max number of consecutive failures before the Hub restarts itself
    # requires jupyterhub 0.9.2
    set_config_if_not_none(
        c.Spawner,
        "consecutive_failure_limit",
        "hub.consecutiveFailureLimit",
    )
  
    for trait, cfg_key in (
        ("pod_name_template", None),
        ("start_timeout", None),
        ("image_pull_policy", "image.pullPolicy"),
        # ('image_pull_secrets', 'image.pullSecrets'), # Managed manually below
        ("events_enabled", "events"),
        ("extra_labels", None),
        ("extra_annotations", None),
        # ("allow_privilege_escalation", None), # Managed manually below
        ("uid", None),
        ("fs_gid", None),
        ("service_account", "serviceAccountName"),
        ("storage_extra_labels", "storage.extraLabels"),
        # ("tolerations", "extraTolerations"), # Managed manually below
        ("node_selector", None),
        ("node_affinity_required", "extraNodeAffinity.required"),
        ("node_affinity_preferred", "extraNodeAffinity.preferred"),
        ("pod_affinity_required", "extraPodAffinity.required"),
        ("pod_affinity_preferred", "extraPodAffinity.preferred"),
        ("pod_anti_affinity_required", "extraPodAntiAffinity.required"),
        ("pod_anti_affinity_preferred", "extraPodAntiAffinity.preferred"),
        ("lifecycle_hooks", None),
        ("init_containers", None),
        ("extra_containers", None),
        ("mem_limit", "memory.limit"),
        ("mem_guarantee", "memory.guarantee"),
        ("cpu_limit", "cpu.limit"),
        ("cpu_guarantee", "cpu.guarantee"),
        ("extra_resource_limits", "extraResource.limits"),
        ("extra_resource_guarantees", "extraResource.guarantees"),
        ("environment", "extraEnv"),
        ("profile_list", None),
        ("extra_pod_config", None),
    ):
        if cfg_key is None:
            cfg_key = camelCaseify(trait)
        set_config_if_not_none(c.KubeSpawner, trait, "singleuser." + cfg_key)
  
    image = get_config("singleuser.image.name")
    if image:
        tag = get_config("singleuser.image.tag")
        if tag:
            image = f"{image}:{tag}"
  
        c.KubeSpawner.image = image
  
    # allow_privilege_escalation defaults to False in KubeSpawner 2+. Since its a
    # property where None, False, and True all are valid values that users of the
    # Helm chart may want to set, we can't use the set_config_if_not_none helper
    # function as someone may want to override the default False value to None.
    #
    c.KubeSpawner.allow_privilege_escalation = get_config(
        "singleuser.allowPrivilegeEscalation"
    )
  
    # Combine imagePullSecret.create (single), imagePullSecrets (list), and
    # singleuser.image.pullSecrets (list).
    image_pull_secrets = []
    if get_config("imagePullSecret.automaticReferenceInjection") and get_config(
        "imagePullSecret.create"
    ):
        image_pull_secrets.append(get_name("image-pull-secret"))
    if get_config("imagePullSecrets"):
        image_pull_secrets.extend(get_config("imagePullSecrets"))
    if get_config("singleuser.image.pullSecrets"):
        image_pull_secrets.extend(get_config("singleuser.image.pullSecrets"))
    if image_pull_secrets:
        c.KubeSpawner.image_pull_secrets = image_pull_secrets
  
    # scheduling:
    if get_config("scheduling.userScheduler.enabled"):
        c.KubeSpawner.scheduler_name = get_name("user-scheduler")
    if get_config("scheduling.podPriority.enabled"):
        c.KubeSpawner.priority_class_name = get_name("priority")
  
    # add node-purpose affinity
    match_node_purpose = get_config("scheduling.userPods.nodeAffinity.matchNodePurpose")
    if match_node_purpose:
        node_selector = dict(
            matchExpressions=[
                dict(
                    key="hub.jupyter.org/node-purpose",
                    operator="In",
                    values=["user"],
                )
            ],
        )
        if match_node_purpose == "prefer":
            c.KubeSpawner.node_affinity_preferred.append(
                dict(
                    weight=100,
                    preference=node_selector,
                ),
            )
        elif match_node_purpose == "require":
            c.KubeSpawner.node_affinity_required.append(node_selector)
        elif match_node_purpose == "ignore":
            pass
        else:
            raise ValueError(
                f"Unrecognized value for matchNodePurpose: {match_node_purpose}"
            )
  
    # Combine the common tolerations for user pods with singleuser tolerations
    scheduling_user_pods_tolerations = get_config("scheduling.userPods.tolerations", [])
    singleuser_extra_tolerations = get_config("singleuser.extraTolerations", [])
    tolerations = scheduling_user_pods_tolerations + singleuser_extra_tolerations
    if tolerations:
        c.KubeSpawner.tolerations = tolerations
  
    # Configure dynamically provisioning pvc
    storage_type = get_config("singleuser.storage.type")
    if storage_type == "dynamic":
        pvc_name_template = get_config("singleuser.storage.dynamic.pvcNameTemplate")
        c.KubeSpawner.pvc_name_template = pvc_name_template
        volume_name_template = get_config("singleuser.storage.dynamic.volumeNameTemplate")
        c.KubeSpawner.storage_pvc_ensure = True
        set_config_if_not_none(
            c.KubeSpawner, "storage_class", "singleuser.storage.dynamic.storageClass"
        )
        set_config_if_not_none(
            c.KubeSpawner,
            "storage_access_modes",
            "singleuser.storage.dynamic.storageAccessModes",
        )
        set_config_if_not_none(
            c.KubeSpawner, "storage_capacity", "singleuser.storage.capacity"
        )
  
        # Add volumes to singleuser pods
        c.KubeSpawner.volumes = [
            {
                "name": volume_name_template,
                "persistentVolumeClaim": {"claimName": pvc_name_template},
            }
        ]
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": volume_name_template,
            }
        ]
    elif storage_type == "static":
        pvc_claim_name = get_config("singleuser.storage.static.pvcName")
        c.KubeSpawner.volumes = [
            {"name": "home", "persistentVolumeClaim": {"claimName": pvc_claim_name}}
        ]
  
        c.KubeSpawner.volume_mounts = [
            {
                "mountPath": get_config("singleuser.storage.homeMountPath"),
                "name": "home",
                "subPath": get_config("singleuser.storage.static.subPath"),
            }
        ]
  
    # Inject singleuser.extraFiles as volumes and volumeMounts with data loaded from
    # the dedicated k8s Secret prepared to hold the extraFiles actual content.
    extra_files = get_config("singleuser.extraFiles", {})
    if extra_files:
        volume = {
            "name": "files",
        }
        items = []
        for file_key, file_details in extra_files.items():
            # Each item is a mapping of a key in the k8s Secret to a path in this
            # abstract volume, the goal is to enable us to set the mode /
            # permissions only though so we don't change the mapping.
            item = {
                "key": file_key,
                "path": file_key,
            }
            if "mode" in file_details:
                item["mode"] = file_details["mode"]
            items.append(item)
        volume["secret"] = {
            "secretName": get_name("singleuser"),
            "items": items,
        }
        c.KubeSpawner.volumes.append(volume)
  
        volume_mounts = []
        for file_key, file_details in extra_files.items():
            volume_mounts.append(
                {
                    "mountPath": file_details["mountPath"],
                    "subPath": file_key,
                    "name": "files",
                }
            )
        c.KubeSpawner.volume_mounts.extend(volume_mounts)
  
    # Inject extraVolumes / extraVolumeMounts
    c.KubeSpawner.volumes.extend(get_config("singleuser.storage.extraVolumes", []))
    c.KubeSpawner.volume_mounts.extend(
        get_config("singleuser.storage.extraVolumeMounts", [])
    )
  
    c.JupyterHub.services = []
    c.JupyterHub.load_roles = []
  
    # jupyterhub-idle-culler's permissions are scoped to what it needs only, see
    # https://github.com/jupyterhub/jupyterhub-idle-culler#permissions.
    #
    if get_config("cull.enabled", False):
        jupyterhub_idle_culler_role = {
            "name": "jupyterhub-idle-culler",
            "scopes": [
                "list:users",
                "read:users:activity",
                "read:servers",
                "delete:servers",
                # "admin:users", # dynamically added if --cull-users is passed
            ],
            # assign the role to a jupyterhub service, so it gains these permissions
            "services": ["jupyterhub-idle-culler"],
        }
  
        cull_cmd = ["python3", "-m", "jupyterhub_idle_culler"]
        base_url = c.JupyterHub.get("base_url", "/")
        cull_cmd.append("--url=http://localhost:8081" + url_path_join(base_url, "hub/api"))
  
        cull_timeout = get_config("cull.timeout")
        if cull_timeout:
            cull_cmd.append(f"--timeout={cull_timeout}")
  
        cull_every = get_config("cull.every")
        if cull_every:
            cull_cmd.append(f"--cull-every={cull_every}")
  
        cull_concurrency = get_config("cull.concurrency")
        if cull_concurrency:
            cull_cmd.append(f"--concurrency={cull_concurrency}")
  
        if get_config("cull.users"):
            cull_cmd.append("--cull-users")
            jupyterhub_idle_culler_role["scopes"].append("admin:users")
  
        if not get_config("cull.adminUsers"):
            cull_cmd.append("--cull-admin-users=false")
  
        if get_config("cull.removeNamedServers"):
            cull_cmd.append("--remove-named-servers")
  
        cull_max_age = get_config("cull.maxAge")
        if cull_max_age:
            cull_cmd.append(f"--max-age={cull_max_age}")
  
        c.JupyterHub.services.append(
            {
                "name": "jupyterhub-idle-culler",
                "command": cull_cmd,
            }
        )
        c.JupyterHub.load_roles.append(jupyterhub_idle_culler_role)
  
    for key, service in get_config("hub.services", {}).items():
        # c.JupyterHub.services is a list of dicts, but
        # hub.services is a dict of dicts to make the config mergable
        service.setdefault("name", key)
  
        # As the api_token could be exposed in hub.existingSecret, we need to read
        # it it from there or fall back to the chart managed k8s Secret's value.
        service.pop("apiToken", None)
        service["api_token"] = get_secret_value(f"hub.services.{key}.apiToken")
  
        c.JupyterHub.services.append(service)
  
    for key, role in get_config("hub.loadRoles", {}).items():
        # c.JupyterHub.load_roles is a list of dicts, but
        # hub.loadRoles is a dict of dicts to make the config mergable
        role.setdefault("name", key)
  
        c.JupyterHub.load_roles.append(role)
  
    # respect explicit null command (distinct from unspecified)
    # this avoids relying on KubeSpawner.cmd's default being None
    _unspecified = object()
    specified_cmd = get_config("singleuser.cmd", _unspecified)
    if specified_cmd is not _unspecified:
        c.Spawner.cmd = specified_cmd
  
    set_config_if_not_none(c.Spawner, "default_url", "singleuser.defaultUrl")
  
    cloud_metadata = get_config("singleuser.cloudMetadata")
  
    if cloud_metadata.get("blockWithIptables") == True:
        # Use iptables to block access to cloud metadata by default
        network_tools_image_name = get_config("singleuser.networkTools.image.name")
        network_tools_image_tag = get_config("singleuser.networkTools.image.tag")
        network_tools_resources = get_config("singleuser.networkTools.resources")
        ip = cloud_metadata["ip"]
        ip_block_container = client.V1Container(
            name="block-cloud-metadata",
            image=f"{network_tools_image_name}:{network_tools_image_tag}",
            command=[
                "iptables",
                "--append",
                "OUTPUT",
                "--protocol",
                "tcp",
                "--destination",
                ip,
                "--destination-port",
                "80",
                "--jump",
                "DROP",
            ],
            security_context=client.V1SecurityContext(
                privileged=True,
                run_as_user=0,
                capabilities=client.V1Capabilities(add=["NET_ADMIN"]),
            ),
            resources=network_tools_resources,
        )
  
        c.KubeSpawner.init_containers.append(ip_block_container)
  
  
    if get_config("debug.enabled", False):
        c.JupyterHub.log_level = "DEBUG"
        c.Spawner.debug = True
  
    # load potentially seeded secrets
    #
    # NOTE: ConfigurableHTTPProxy.auth_token is set through an environment variable
    #       that is set using the chart managed secret.
    c.JupyterHub.cookie_secret = get_secret_value("hub.config.JupyterHub.cookie_secret")
    # NOTE: CryptKeeper.keys should be a list of strings, but we have encoded as a
    #       single string joined with ; in the k8s Secret.
    #
    c.CryptKeeper.keys = get_secret_value("hub.config.CryptKeeper.keys").split(";")
  
    # load hub.config values, except potentially seeded secrets already loaded
    for app, cfg in get_config("hub.config", {}).items():
        if app == "JupyterHub":
            cfg.pop("proxy_auth_token", None)
            cfg.pop("cookie_secret", None)
            cfg.pop("services", None)
        elif app == "ConfigurableHTTPProxy":
            cfg.pop("auth_token", None)
        elif app == "CryptKeeper":
            cfg.pop("keys", None)
        c[app].update(cfg)
  
    # load /usr/local/etc/jupyterhub/jupyterhub_config.d config files
    config_dir = "/usr/local/etc/jupyterhub/jupyterhub_config.d"
    if os.path.isdir(config_dir):
        for file_path in sorted(glob.glob(f"{config_dir}/*.py")):
            file_name = os.path.basename(file_path)
            print(f"Loading {config_dir} config: {file_name}")
            with open(file_path) as f:
                file_content = f.read()
            # compiling makes debugging easier: https://stackoverflow.com/a/437857
            exec(compile(source=file_content, filename=file_name, mode="exec"))
  
    # execute hub.extraConfig entries
    for key, config_py in sorted(get_config("hub.extraConfig", {}).items()):
        print(f"Loading extra config: {key}")
        exec(config_py)
  z2jh.py: |
    """
    Utility methods for use in jupyterhub_config.py and dynamic subconfigs.
  
    Methods here can be imported by extraConfig in values.yaml
    """
  
    import os
    from collections.abc import Mapping
    from functools import lru_cache
  
    import yaml
  
  
    # memoize so we only load config once
    @lru_cache
    def _load_config():
        """Load the Helm chart configuration used to render the Helm templates of
        the chart from a mounted k8s Secret, and merge in values from an optionally
        mounted secret (hub.existingSecret)."""
  
        cfg = {}
        for source in ("secret/values.yaml", "existing-secret/values.yaml"):
            path = f"/usr/local/etc/jupyterhub/{source}"
            if os.path.exists(path):
                print(f"Loading {path}")
                with open(path) as f:
                    values = yaml.safe_load(f)
                cfg = _merge_dictionaries(cfg, values)
            else:
                print(f"No config at {path}")
        return cfg
  
  
    @lru_cache
    def _get_config_value(key):
        """Load value from the k8s ConfigMap given a key."""
  
        path = f"/usr/local/etc/jupyterhub/config/{key}"
        if os.path.exists(path):
            with open(path) as f:
                return f.read()
        else:
            raise Exception(f"{path} not found!")
  
  
    @lru_cache
    def get_secret_value(key, default="never-explicitly-set"):
        """Load value from the user managed k8s Secret or the default k8s Secret
        given a key."""
  
        for source in ("existing-secret", "secret"):
            path = f"/usr/local/etc/jupyterhub/{source}/{key}"
            if os.path.exists(path):
                with open(path) as f:
                    return f.read()
        if default != "never-explicitly-set":
            return default
        raise Exception(f"{key} not found in either k8s Secret!")
  
  
    def get_name(name):
        """Returns the fullname of a resource given its short name"""
        return _get_config_value(name)
  
  
    def get_name_env(name, suffix=""):
        """Returns the fullname of a resource given its short name along with a
        suffix, converted to uppercase with dashes replaced with underscores. This
        is useful to reference named services associated environment variables, such
        as PROXY_PUBLIC_SERVICE_PORT."""
        env_key = _get_config_value(name) + suffix
        env_key = env_key.upper().replace("-", "_")
        return os.environ[env_key]
  
  
    def _merge_dictionaries(a, b):
        """Merge two dictionaries recursively.
  
        Simplified From https://stackoverflow.com/a/7205107
        """
        merged = a.copy()
        for key in b:
            if key in a:
                if isinstance(a[key], Mapping) and isinstance(b[key], Mapping):
                    merged[key] = _merge_dictionaries(a[key], b[key])
                else:
                    merged[key] = b[key]
            else:
                merged[key] = b[key]
        return merged
  
  
    def get_config(key, default=None):
        """
        Find a config item of a given name & return it
  
        Parses everything as YAML, so lists and dicts are available too
  
        get_config("a.b.c") returns config['a']['b']['c']
        """
        value = _load_config()
        # resolve path in yaml
        for level in key.split("."):
            if not isinstance(value, dict):
                # a parent is a scalar or null,
                # can't resolve full path
                return default
            if level not in value:
                return default
            else:
                value = value[level]
        return value
  
  
    def set_config_if_not_none(cparent, name, key):
        """
        Find a config item of a given name, set the corresponding Jupyter
        configuration item if not None
        """
        data = get_config(key)
        if data is not None:
            setattr(cparent, name, data)
  checksum_hook-image-puller: "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c"
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/configmap.yaml
# This configmap contains Traefik configuration files to be mounted.
# - traefik.yaml will only be read during startup (static configuration)
# - dynamic.yaml will be read on change (dynamic configuration)
#
# ref: https://docs.traefik.io/getting-started/configuration-overview/
#
# The configuration files are first rendered with Helm templating to large YAML
# strings. Then we use the fromYAML function on these strings to get an object,
# that we in turn merge with user provided extra configuration.
#
kind: ConfigMap
apiVersion: v1
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  traefik.yaml: |
    accessLog:
      fields:
        headers:
          names:
            Authorization: redacted
            Cookie: redacted
            Set-Cookie: redacted
            X-Xsrftoken: redacted
      filters:
        statusCodes:
        - 500-599
    certificatesResolvers:
      default:
        acme:
          caServer: https://acme-v02.api.letsencrypt.org/directory
          email: aiidalab@materialscloud.org
          httpChallenge:
            entryPoint: http
          storage: /etc/acme/acme.json
    entryPoints:
      http:
        address: :8080
      https:
        address: :8443
        transport:
          respondingTimeouts:
            idleTimeout: 10m0s
    log:
      level: WARN
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
  dynamic.yaml: |
    http:
      middlewares:
        hsts:
          headers:
            stsIncludeSubdomains: false
            stsPreload: false
            stsSeconds: 15724800
        redirect:
          redirectScheme:
            permanent: true
            scheme: https
        scheme:
          headers:
            customRequestHeaders:
              X-Scheme: https
      routers:
        default:
          entrypoints:
          - https
          middlewares:
          - hsts
          - scheme
          rule: PathPrefix(`/`)
          service: default
          tls:
            certResolver: default
            domains:
            - main: psi-tutorial.aiidalab.io
            options: default
        insecure:
          entrypoints:
          - http
          middlewares:
          - redirect
          rule: PathPrefix(`/`)
          service: default
      services:
        default:
          loadBalancer:
            servers:
            - url: http://proxy-http:8000/
    tls:
      options:
        default:
          cipherSuites:
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          minVersion: VersionTLS12
          sniStrict: true
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
data:
  config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1
    kind: KubeSchedulerConfiguration
    leaderElection:
      resourceLock: endpointsleases
      resourceName: user-scheduler-lock
      resourceNamespace: "production"
    profiles:
      - schedulerName: production-user-scheduler
        plugins:
          score:
            disabled:
            - name: NodeResourcesBalancedAllocation
            - name: NodeAffinity
            - name: InterPodAffinity
            - name: NodeResourcesFit
            - name: ImageLocality
            enabled:
            - name: NodeAffinity
              weight: 14631
            - name: InterPodAffinity
              weight: 1331
            - name: NodeResourcesFit
              weight: 121
            - name: ImageLocality
              weight: 11
        pluginConfig:
          - args:
              scoringStrategy:
                resources:
                - name: cpu
                  weight: 1
                - name: memory
                  weight: 1
                type: MostAllocated
            name: NodeResourcesFit
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-templates
data:
  README.md: |-
    # Templates
  
    The templates are adapted from [LibreTexts/jupyterhub-templates](https://github.com/LibreTexts/jupyterhub-templates).
  about.html: |-
    <html>
        <head>
            <title>About Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://www.aiidalab.net/about/" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab about page. If you are not redirected, click <a href="https://www.aiidalab.net/about/">here</a> to go to the page.</p>
       </body>
    </html>
  faq.html: |-
    <html>
        <head>
            <title>FAQ Page Redirect</title>
         <meta charset="UTF-8" />
         <meta http-equiv="refresh" content="0; URL=https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page" />
       </head>
       <body>
         <p>This page not yet specified to PSI AiiDAlab deployment so will redirect to the generic AiiDAlab documentation page. If you are not redirected, click <a href="https://aiidalab.readthedocs.io/en/latest/usage/index.html#aiidalab-home-page">here</a> to go to the page.</p>
       </body>
    </html>
  login.html: "{% extends \"templates/login.html\" %}\n\n{% block title %}PSI AiiDAlab
    - Login{% endblock %}\n\n<!-- Global site tag (gtag.js) - Google Analytics (comming
    soon) -->\n\n{% block main %}\n\n<div class=\"main-content container\">\n  <div
    class=\"branding\">\n    <div class=\"logos\">\n      <a class=\"logo\" href=\"https://aiidalab.net\"
    target=\"_blank\">\n        <img src=\"/hub/static/external/aiidalab-wide-logo.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n      </a>\n      <a
    class=\"logo\" href=\"https://psi.ch\" target=\"_blank\" style=\"padding:20px;\">\n
    \       <img src=\"/hub/static/external/psi-logo.png\" alt=\"PSI\" style=\"max-height:100px;max-width:100%;\">\n
    \     </a>\n      <a class=\"logo\" href=\"https://www.psi.ch/en/lms\" target=\"_blank\">\n
    \       Laboratory for Materials Simulations (LMS)\n      </a>\n      <a class=\"logo\"
    href=\"http://nccr-marvel.ch/\" target=\"_blank\">\n        <img class=\"sponsor\"
    src=\"/hub/static/external/marvel-cropped-logo.png\" alt=\"NCCR MARVEL\" style=\"max-height:100px;max-width:100%\">\n
    \     </a>\n    </div>\n  </div>\n\n  {% block login %}\n  <div class=\"col-sm-4
    left-col\">\n    <div id=\"login-box\">\n      <h3 align=\"center\">Login to AiiDAlab</h3>\n
    \     <div align=\"center\">\n        <a class=\"logo\" href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">\n          <img src=\"https://indico.psi.ch/event/17436/logo-123289806.png\"
    alt=\"AiiDAlab\" style=\"max-height:80px;max-width:100%;\">\n        </a>\n      </div>\n
    \     {{ super() }}\n    </div>\n\n    <div id=\"sponsor\">\n        <p>\n        <small>\n
    \           This work is or has been supported by the <a href=\"http://nccr-marvel.ch\">MARVEL
    National Centre of Competence in Research</a> and funded by the <a href=\"http://www.snf.ch/en\">Swiss
    National Science Foundation</a>, the MARKETPLACE project funded by <a href=\"https://ec.europa.eu/programmes/horizon2020/\">Horizon
    2020</a> under the H2020-NMBP-25-2017 call (Grant No.&nbsp;760173), as well as by
    the <a href=\"http://www.max-centre.eu/\">MaX European Centre of Excellence</a>
    funded by the Horizon 2020 EINFRA-5 program, Grant No.&nbsp;676598, and other <a
    href=\"https://www.materialscloud.org/home#partners\">Materials Cloud partners</a>.\n
    \       </small>\n        </p>\n    </div>\n    <div id=\"acknowledgement\">\n      <p>\n
    \     <small>\n        We kindly ask you to cite the following publication if you
    use AiiDAlab:\n        <p class=\"reference\">\n            A. V. Yakutovich et
    al., Comp. Mat. Sci. 188, 110165 (2021) <a href=\"https://doi.org/10.1016/j.commatsci.2020.110165\"
    target=\"_blank\">DOI:10.1016/j.commatsci.2020.110165</a>\n        </p>\n      </small>\n
    \     </p>\n    </div>\n\n\n    <div class=\"sponsors row align-items-center justify-content-around
    flex-wrap\"></div>\n  </div>\n  {% endblock login %}\n\n  <div class=\"container
    col-sm-7\">\n    <h1>Welcome to the AiiDAlab deployment for PSI tutorials!</h1>\n
    \   <p>This AiiDAlab server is deployed and maintained by the <a href=\"https://www.psi.ch/en/lms/msd-group\"
    target=\"_blank\">Materials Software and Data Group (MSD)</a> \n      and its aim
    is to serve users during the course <a href=\"https://indico.psi.ch/event/17436\"
    target=\"_blank\">Electronic-structure simulations for user communities at large-scale
    facilities</a>.</p>\n    <p>The virtual machines used for this course are provided
    by the <a href=\"https://azure.microsoft.com\" target=\"_blank\">Azure cloud service</a>.</p>\n\n
    \   <h2>Login to AiiDAlab</h2>\n    <p>\n      The service is accessible with GitHub
    credentials:\n      <ul>\n        <li>Click on the \"Sign in with GitHub\" button.</li>\n
    \       <li>Authorize the application to access your GitHub account (needed for
    authentication).</li>\n        <li>Once you are logged in, you will be redirected
    to the AiiDAlab home page.</li>\n      </ul>\n    </p>\n\n    <h2 id=\"gettingstartedwithaiidalab\">Getting
    started with AiiDAlab</h2>\n    <p>\n      <a href=\"https://aiidalab.net\" target=\"_blank\">AiiDAlab</a>
    is a web environment to run materials simulation online. \n      It is based on
    <a href=\"https://jupyter.org/index.html\" target=\"_blank\">Jupyter</a> as the
    web backend, and <a href=\"https://aiida.net\" target=\"_blank\">AiiDA</a> as the
    workflow engine.\n    </p>\n\n    <p>Some resources to learn AiiDAlab:</p>\n    <ul>\n
    \     <li>\n        <a href=\"https://aiidalab.readthedocs.io/en/latest/\" target=\"_blank\">Our
    official documentation</a>, for a more detailed introduction and hands on guide.\n
    \     </li>\n      <li>\n        An <a href=\"https://www.youtube.com/watch?v=Oqo5buk6Om8\"
    target=\"_blank\">AiiDAlab introduction</a> video for an overview.\n      </li>\n
    \   </ul>\n\n    <h2>Any questions?</h2>\n    <p>Please checkout our <a href=\"{{base_url}}faq\"
    target=\"_blank\">FAQ</a> page. If you cannot find your question, feel free to <a
    href=\"mailto:miki.bonacci@psi.ch?subject=[Help]%20AiiDAlab PSI&cc=giovanni.pizzi@psi.ch,xing.wang@psi.ch\"
    target=\"_blank\">send an email to the developers</a>. For technical issues, <a
    href=\"https://gitlab.psi.ch/yu_j/aiidalab-psi-deploy/-/issues/new\" target=\"_blank\">open
    an issue on GitLab</a> and we will try to resolve it.</p>\n  </div>\n</div>\n\n{%
    endblock main %}\n\n{% block stylesheet %}\n{{ super() }}\n<style>\n  .main-content
    {\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .logos {\n    display:
    flex;\n    align-items: center;\n    justify-content: space-around;\n    margin:
    auto 30px;\n    flex-wrap: nowrap;\n  }\n\n  .left-col {\n    margin-top: 20px;\n
    \ }\n\n  .brand {\n    flex-shrink: 2;\n  }\n\n  @media all and (max-width: 500px)
    {\n    .logos {\n      /* On small screens, we are no longer using row direction
    but column */\n      /* flex-direction: column; */\n      align-items: center;\n
    \     justify-content: center;\n      flex-wrap: wrap;\n    }\n    .branding img
    {\n      justify-content: center;\n      max-width: 100%;\n    }\n  }\n\n  @media
    (max-width: 767px) {\n    .logos {\n      justify-content: space-around;\n    }\n
    \   .logo {\n      flex-basis: 50%;\n    }\n  }\n\n  @media (max-width: 1400px)
    {\n    .logos {\n      justify-content: space-around;\n    }\n    .main-content
    {\n      width: 100%;\n    }\n  }\n\n  @media (min-width: 1401px) {\n    .main-content
    {\n      width: 1400px;\n    }\n  }\n\n  .sponsors {\n    display: flex;\n    flex-direction:
    row;\n    justify-content: space-evenly;\n  }\n\n  .sponsors-footer {\n    height:
    300px;\n  }\n\n  .sponsor {\n    padding: 10px;\n    max-width: 100%;\n    max-height:
    150px;\n  }\n\n  #login-box {\n    border: 1px solid silver;\n    padding: 10px;\n
    \   margin-bottom: 30px;\n    /*   box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0
    6px 20px 0 rgba(0, 0, 0, 0.19);\n    -webkit-box-shadow: 0 4px 8px 0 rgba(0, 0,
    0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    -moz-box-shadow: 0 4px 8px 0 rgba(0,
    0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); */\n    border-radius: 5px;\n    flex-grow:
    2;\n  }\n\n  .body {\n    padding-bottom: 50px;\n  }\n\n  #login-main .auth-form-body
    {\n    border-color: rgb(0, 124, 186);\n    color: white;\n  }\n\n  #login-main
    {\n    margin-top: 5%;\n    height: inherit;\n    width: inherit;\n    margin-bottom:
    5%;\n  }\n\n  #login-main .container {\n    width: 50%;\n  }\n\n  footer {\n    border-top:
    1px solid silver;\n    padding: 10px;\n    bottom: 0;\n    position: fixed;\n    width:
    100%;\n  }\n\n  footer p {\n    margin: 0 auto 0 auto;\n    text-align: center;\n
    \ }\n\n  #login-main form {\n    vertical-align: top;\n  }\n\n  #login-main .auth-form-header
    {\n    color: white;\n    background: rgb(219, 170, 0);\n    border: 1px solid;\n
    \   border-color: rgb(0, 124, 186);\n  }\n\n  #insecure-login-warning {\n    color:
    black;\n  }\n\n  .btn-jupyter.active,\n  .btn-jupyter:active,\n  .open>.dropdown-toggle.btn-jupyter
    {\n    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px #a88400;\n    border-color:
    #a88400;\n    outline-color: #a88400;\n  }\n\n  #login-main .form-control:focus,\n
    \ #login-main input[type=submit]:focus {\n    box-shadow: inset 0 1px 1px rgba(0,
    0, 0, .075), 0 0 8px rgb(219, 170, 0);\n    border-color: rgb(219, 170, 0);\n    outline-color:
    rgb(219, 170, 0);\n  }\n\n  .btn-jupyter {\n    color: #fff;\n    background-color:
    #F37524;\n    border-color: #E34F21;\n    padding: 10px;\n  }\n\n  .col-1 {\n    width:
    8.33%;\n  }\n\n  .col-2 {\n    width: 16.66%;\n  }\n\n  .col-3 {\n    width: 25%;\n
    \ }\n\n  .col-4 {\n    width: 33.33%;\n  }\n\n  .col-5 {\n    width: 41.66%;\n  }\n\n
    \ .col-6 {\n    width: 50%;\n  }\n\n  .col-7 {\n    width: 58.33%;\n  }\n\n  .col-8
    {\n    width: 66.66%;\n  }\n\n  .col-9 {\n    width: 75%;\n  }\n\n  .col-10 {\n
    \   width: 83.33%;\n  }\n\n  .col-11 {\n    width: 91.66%;\n  }\n\n  .col-12 {\n
    \   width: 100%;\n  }\n</style>\n{% endblock %}"
  page.html: "{% extends \"templates/page.html\" %}\n\n{% block nav_bar %}\n  <nav class=\"navbar
    navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n
    \       {% block logo %}\n        <span id=\"jupyterhub-logo\" class=\"pull-left\">\n
    \           <a href=\"{{logo_url or base_url}}\"><img src='{{base_url}}logo' alt='JupyterHub'
    class='jpy-logo' title='Home'/></a>\n        </span>\n        {% endblock %}\n        <button
    type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#thenavbar\"
    aria-expanded=\"false\">\n          <span class=\"sr-only\">Toggle navigation</span>\n
    \         <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n
    \         <span class=\"icon-bar\"></span>\n        </button>\n      </div>\n\n
    \     <div class=\"collapse navbar-collapse\" id=\"thenavbar\">\n        {% if user
    %}\n        <ul class=\"nav navbar-nav\">\n          {% block nav_bar_left_items
    %}\n            <li><a href=\"{{base_url}}home\">Home</a></li>\n            <li><a
    href=\"{{base_url}}token\">Token</a></li>\n            {% if user.admin %}\n            <li><a
    href=\"{{base_url}}admin\">Admin</a></li>\n            {% endif %}\n            {%
    if services %}\n            <li class=\"dropdown\">\n              <a href=\"#\"
    class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"
    aria-expanded=\"false\">Services<span class=\"caret\"></span></a>\n              <ul
    class=\"dropdown-menu\">\n              {% for service in services %}\n                <li><a
    class=\"dropdown-item\" href=\"{{service.prefix}}\">{{service.name}}</a></li>\n
    \             {% endfor %}\n              </ul>\n            </li>\n            {%
    endif %}\n\n            {# Start AiiDAlab specific change #}\n            <li><a
    href=\"{{base_url}}about\">About</a></li>\n            <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \           {# End change #}\n\n          {% endblock %}\n        </ul>\n\n        {#
    Start AiiDAlab specific change #}\n        {% else %}\n        <ul class=\"nav navbar-nav\">\n
    \         <li><a href=\"{{base_url}}about\">About</a></li>\n          <li><a href=\"{{base_url}}faq\">FAQ</a></li>\n
    \       </ul>\n        {# End change #}\n\n        {% endif %}\n        <ul class=\"nav
    navbar-nav navbar-right\">\n          {% block nav_bar_right_items %}\n            <li>\n
    \             {% block login_widget %}\n                <span id=\"login_widget\">\n
    \                 {% if user %}\n\t\t    <p class=\"navbar-text\">{{user.name}}</p>\n
    \                   <a id=\"logout\" role=\"button\" class=\"navbar-btn btn-sm btn
    btn-default\" href=\"{{logout_url}}\"> <i aria-hidden=\"true\" class=\"fa fa-sign-out\"></i>
    Logout</a>\n                  {% else %}\n                    <a id=\"login\" role=\"button\"
    class=\"btn-sm btn navbar-btn btn-default\" href=\"{{login_url}}\">Login</a>\n                  {%
    endif %}\n                </span>\n              {% endblock %}\n            </li>\n
    \         {% endblock %}\n        </ul>\n      </div>\n\n      {% block header %}\n
    \     {% endblock %}\n    </div>\n  </nav>\n{% endblock %}"
  spawn_pending.html: |
    {% extends "templates/spawn_pending.html" %}
  
    {% block message %}
    <p>Your AiiDAlab server is starting up.</p>
    <ul>
        <li>You will be redirected automatically when it's ready for you.</li>
        <li>If you see any error or the procedure takes too long (>1 min), please ask for support.</li>
    </ul>
    {% endblock %}
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-external
binaryData:
  aiidalab-wide-logo.png: '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'
  marvel-cropped-logo.png: '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oF2T5KmnnpInn3wSBVD6DmrUqOFKx7jp06djYIWxgaVoweoBAwbYFzZumViZMmWyazt6pcYRmOH48ePSrFkzo2NF17pDhw75/btocfoOHToY/S5a7F7/XMDAAsDAAgwsDKybotEokydPliRJkhjfULkZAq6FbgcOHGj80NCrV6+Q3jyFu4GltWW0W6UbxoY+W/AOWnRd6/KZftdly5b1VPcvDKzAoM1QNH3LZE2jG6WRLXPmzKEWUIixePFio2uT1ox69tln/f49NAJeI6ZMjvfly5czQDCwADCwAAMLA+u/0dvk1q1bG91462KhaVpupRJqiLnpjlAlS5aUjRs3hvS7DncDa9GiRXZ6jumDptZ+O3jwICu3x8zKwYMHG3/XurY98cQTGFh0CLMvadq0aeNayqpKo0W/+OILJnQIod2ahw0bZjwCeP369X77DlrrtHLlykbT77X8BGmzGFgAGFiAgYWBFStWr15tty02nUq4YMEC459VUwc1CsJ0gWZN1wh1wtnA0qL8rVq1Mn7ATJYsmX0TDd7j119/lbx58xp/5/ny5Qu6jTsGljtoNF7jxo1dbSCg423hwoU87BBi06ZNUrRoUaPjRA17f3Sw1IhATdU2mUKr5SC0yD1gYAFgYAEGFgZWrDck2vnIdHelmjVryr59+4x9Tk0dHDRokPEbb01H1A5TGFiha2Bp1J6aTaYPly1atJATJ06wansQrR80fvx4V9K8NIIimDrFYWC5h16q1KpVy1UTq3DhwrJ06VIedggxZcoUo80ANLrYjUvDG/nll1+MXgzovlOL2wMGFgAGFmBgYWDFCT2EawFN010Jte24qYOemhCmuw5qNNfWrVvD4h2Hq4Gl6X1uFPXWg7w/DgzgO3qrX7p0aePvXsf/999/j4EFNnqQu/POO101sUqVKiUrV67kYYcIWketXr16RseIRgNqWQi30EvEPn36GP3M2g1bi9sDBhYABhZgYGFgxZm1a9dKoUKFjG5OtFipiUP+li1bjKcOpkqVSmbPnh027zdcDSzTN93XF/0/f/48K7bHeemll4w3qlB16tRJzpw5g4EFNj/99JMrZun1qlChgh0BA6HB559/LqlTpzY2PiIiIlztlKr12NKkSWO01ITWpgQMLAAMLMDAwsDymddee02ioqKMbro1vcJJKqHe+ml9B9Opg0OHDg0rAyIc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jx498nZC4c/qZdStY0du39leHz9CRd7Vyt523bpf/5zHyoknnigDFQNmzJhhderUyX2bldfO99oPEk/Uitz+57XREczjtWvXtosuusjWxrRsU42ifCviEyJUmJc0fnxCDBMivsvfZtdfn7sQEmw77GAWo9MfJGBJwFJTk4BVWtlYixcv9osWt2rVqiDbCju2aGbX7LW7rTjpKIlYamXbLu/bK+cxcuGFF8o4xYBPPvnEdt9991D2roPX5klAUStiW+e1a7xWP4L5e8iQIbZ8+fLYjtniCFiky3KKWpgXtdFGZk89Jasr4gtCbfv24Y1S8+Zmf/6znqcELDU1CVgSsEKxZs0amz17tg0cONDq1q2bdxGrXq1atv9WW9gzow6ytadPlpClVlZtndenp+6yY84ZDtezyCliwZ133hn64IspXvteQopakdrznA4cwby95ZZb2osvvhjr8VqjaN9MIXYKsod5WaNGJQrDCxG/5RyzffYJb5A8599OP13ZhhKw1NQkYEnAioxPP/3UrrjiCmvfvn1BsrE29d7tubt1tw+PGysRS61s2venTbIx23bKaUwgltyHryFiwRdffOEX1Q9l5ypEBIkpaoVun3ht3wjmauzSdddd52dtS8BKBXsqp04Nn5ny2GOyuiJefPddQnSqWTO8URo40Ozjj/VMS0rA2kGOvZpaloWQbdyhErAKzLp162zu3Ll22GGHeeauYd5FrFobbGC7bdbaHhy2r62eNlFCllrJtzVePx7Yvm1O46Fp06b29NNPyxDFiIceesh/L2Hs3DivrZKgolbARtbfeRUnYoadp8eOHWtff/117MdqjaJ++xtvmHXoEO7FDRtmVgIPWlQj7r03Ia6GNUpsP9RhBaUnYLXd1GyMZ5dOm6QATU2tqswr2glHmu25q1mdOhKwigDO6u23325du3a1DTbYIO9CVrN6dW1Ct21twTGj7EfXBzQe1EqwfXXyMda9dW415TbaaCObP3++DFCM4MCLkSNHhrJvG3rtcYkqagVsj3itVQRz84477mgLFiwoibFaXAFr3Tqzs88Od0JbkyZmDz4oqyviAc4IBdfDGiTEkxtu0PMsRQGL1qiB2Y7bmB0+zGyahCw1tZTC1fHjzPbZ06zNJuEyViVgRcKiRYtsypQptuGGG+ZdxOLUrm1atrCb9ulrX558jGykWknasfcn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2LNDffr0sUsvvdReffVVFWQXIiTvvfeeb0ck2pRXow4gcwP1q+rWretnqjZs2NAaNWpkTZo08RdAmjdvbi1atLCWLVtaq1at/EWBrl272qhRo/yFAW0blID1U5DFqYHFKkCsVpqtfXuz55+XdRCiVISsxgEhK5ethXE8VfC++yRcCREz3n33XX/rHMFHuQZiZIds5dnzCRMm2KxZs2z58uV+5ogQIhoQKxA1JPyEb2zvduIRtisoIJHV5EQkxHieebNmzXwBiYM6KKqPrWNbJ0ISwiIn0fbt29cGDhxogwcPtqFDh/qZp2PGjPEzcbGLJ5xwgk2dOtWvaXbeeef5Av+VV15p11xzjd14441222232d133+25cffZww8/bI8//rjNmTPHCy2ft5dfftneeOMNW7RokS1ZssQ++eQT/xRcIQHr5xBcdewoUUYts+YZOrvhBvJ8ZR2EyFXIKtaiQbZCVirhqnat4tkeZVwJEXu+//57e+KJJ/wAh2CpXIJACrLv59mg66+/3t5++23/PoUQ0YNgcf755/viSjkJSMkiEo2DMBCTEJHIQHKZR1tssYVtvfXW68Wj7t27W69evWyPPfawAQMG2KBBg+yAAw6wgw8+2EaMGGGHH364jR8/3iZNmmQnnXSSv5DAibEXX3yxXXHFFXb11Vd74dsNduutt/5MPMJWIx698MILfhbp/Pnz/VpkCxcutHfeecdflHj//ff9E2iXLl1qn376qX3++eeeG/alffXVV3727erVq+27777zt01LzJeAVRjoaBdcULzMALXSakcdZbZypSyDEGGFrA4diitkdatEyFovXI0vfsaVhCshShICHQKn9u3bl2zwSYC500472emnn27PPfecH7AJIfIPwghicefOnUMfEsHvOyEpKCYhJCGSsX2NrKNNNtnE2rZt69usjh07rhePdt55Z9t111397cL9+vXzTxZFzHYC0siRI23cuHF+9tGJJ564Xjy66KKL7Ne//vUvxKP7PX/mkUcesdmzZ/sHPbz00kt+5tFrr73mZx+96fmJQQGJmnoff/yxLVu2zD777DNfPOJwCLYsO+FIiOolYMGiRWbbbSdxRq3ytssuib4ihAjHunXxyMhqlCRknZVqq2DN4m4VVHF2IUrY1K2zuXPn+jVMSiWbgkC3Xbt2/jXfe++9fuaBsgqEKDyMO7Id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lhBCCCGEEEIIIYSINRKwhBBCCCGEEEIIIUSskYAlhBBCCCGEEEIIIWKNBCwhhBBCCCGEEEIIEWskYAkhhBBCCCGEEEKIWCMBSwghhBBCCCGEEELEGglYQgghhBBCCCGEECLWSMASQgghhBBCCCGEELFGApYQQgghhBBCCCGEiDUSsIQQQgghhBBCCCFErJGAJYQQQgghhBBCCCFijQQsIYQQQgghhBBCCBFrJGAJIYQQQgghhBBCiFgjAUsIIYQQQgghhBBCxBoJWEIIIYQQQgghhBAi1kjAEkIIIYQQQgghhBCxRgKWEEIIIYQQQgghhIg1ErCEEEIIIYQQQgghRKyRgCWEEEIIIYQQQgghYo0ELCGEEEIIIYQQQggRayRgCSGEEEIIIYQQQohYIwFLCCGEEEIIIYQQQsQaCVhCCCGEEEIIIYQQItZIwBJCCCGEEEIIIYQQsUYClhBCCCGEEEIIIYSINRKwhBBCCCGEEEIIIUSskYAlhBBCCCGEEEIIIWKNBCwhhBBCCCGEEEIIEWskYAkhhBBCCCGEEEKIWCMBSwghhBBCCCGEEELEGglYQgghhBBCCCGEECLWSMASQgghhBBCCCGEELFGApYQQgghhBBCCCGEiDUSsIQQQgghhBBCCCFErJGAJYQQQgghhBBCCCFijQQsIYQQQgghhBBCCBFrJGAJIYQQQgghhBBCiFgjAUsIIYQQQgghhBBCxBoJWEIIIYQQQgghhBAi1kjAEkIIIYQQQgghhBCxRgKWEEIIIYQQQgghhIg1ErCEEEIIIYQQQgghRKyRgCWEEEIIIYQQQgghYo0ELCGEEEIIIYQQQggRayRgCSGEEEIIIYQQQohYIwFLCCGEEEIIIYQQQsQaCVhCCCGEEEIIIYQQItZIwBJCCCGEEEIIIYQQsUYClhBCCCGEEEIIIYSINRKwhBBCCCGEEEIIIUSskYAlhBBCCCGEEEIIIWKNBCwhhBBCCCGEEEIIEWskYAkhhBBCCCGEEEKIWCMBSwghhBBCCCGEEELEGglYQgghhBBCCCGEECLWSMASQgghhBBCCCGEELFGApYQQgghhBBCCCGEiDUSsIQQQgghhBBCCCFErJGAJYQQQgghhBBCCCFijQQsIYQQQgghhBBCCBFrJGAJIYQQQgghhBBCiFgjAUsIIYQQQgghhBBCxBoJWEIIIYQQQgghhBAi1kjAEkIIIYQQQgghhBCxRgKWEEIIIYQQQgghhIg1ErCEEEIIIYQQQgghRKyRgCWEEEIIIYQQQgghYo0ELJEVP/74o3333Xf27bff2sqVK+2bb76x1atX27p16/RwRKX88MMPfl+hz9B36ENr167VgxEaG97YWLVqlT8uaPxZYyO3+WjNmjX+3xfbtn3//fd6QULEBOxpso2V3yqqO4wB5kw3d7k5VGOj+vmfrg/wZ/4u7tTI9WbffPNN+9e//uXfbL746quvbPbs2fbPf/4zEmeeQfmPf/zDXnzxRd/prQxeJD9777332p/+9KeCtD//+c/29NNP+/c9f/58e+CBByL9fJ7ll19+mfHz4mffeuste/jhh+03v/mNnXTSSTZmzBg76KCDbPDgwTZo0CDbd9997YADDrARI0bYhAkT7MILL7Q777zT7xsff/xxzu+N35s3b5698sor/mDKFytWrLDHH3/cXn311UgGLP3mqaeesrlz50byefTTF154wf7v//7P/+xSgPe1ePFimzNnjt1444121lln2VFHHWWHHHKI7b///n6foe/Qh4YPH+7/23nnnWe33367PzY//PDDKsen65+PPfZYXsbifffdZ//+979TTuJcG+/3jTfeyOg6c+WTTz6xRx991BYsWPCzgHzZsmV+n8VeFMo28TwYi8HxvGjRIv/vK7NnNH7mL3/5i38v9Ak+5z//+Y999NFHWY1tngG/V9l3hml/+9vf7LPPPsvr2EDkWLJkiT3zzDN28803rx8bjIPg2BgyZIgdfPDBNm7cODvttNPsuuuus7///e/23//+1xdHcrUlzz77bF77Ce+YfpsPJ3v58uX+nHD//ffbr3/9azvxxBP9+Wjo0KG/mI9GjRplU6ZMsauuusoeeeQRfwx98cUXoYUtRCn6LXYKe3X++efbMcccY4ceeugvbBvz5BFHHGFTp061q6++2n829F/m91xZunSpb/MYe4UW6Xh+9EHmynTBDXMUP1OVn4NfhX8za9Ysf77kM99++22/72RqU7FFL730Ut7sIGPUjTWeO/ah0DaX/h70I959993I/ULX8PPw2VLx+eef2/PPP+/brnz1Oz6XcRrWhjC+Fi5c6L+va665xk499VQbO3asb0+xq4xPGuOVcTtx4kS75JJL/GdAP2R+zcR3ww789a9/zcu7YL7kWecC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'
  psi-logo.png: ''
  psi-old-logo.svg: 'PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEiIHdpZHRoPSI0MjAiIGhlaWdodD0iMTUwIj48c3R5bGU+LnN0eWxlMHtmaWxsOiNiZGJhYmE7ZmlsbC1ydWxlOm5vbnplcm99LnN0eWxlMSwuc3R5bGUye3N0cm9rZTojMDAwO3N0cm9rZS13aWR0aDo0Ljk2Nzk5OTk0fS5zdHlsZTF7ZmlsbC1ydWxlOm5vbnplcm87ZmlsbDojZmZmfS5zdHlsZTJ7ZmlsbDpub25lfS5zdHlsZTN7ZmlsbDojMDAwfTwvc3R5bGU+PHBhdGggZD0iTTEwMS42IDczLjFIMzQuOGMtMTAuMyAwLTE4LjYgNy4xLTE4LjYgMTUuOXYxNi43YzAgOC44IDguMyAxNS45IDE4LjYgMTUuOWg2Ni44TTMxOS40IDczLjFoNjUuOGMxMC4zIDAgMTguNiA3LjEgMTguNiAxNS45djE2LjdjMCA4LjgtOC4zIDE1LjktMTguNiAxNS45aC02NS45TTE4Ny44IDEyMS41bDIuNS0xNC41LTU2LjktLjEuMiAxNC43IDU0LjItLjF6IiBjbGFzcz0ic3R5bGUwIi8+PHBhdGggZD0iTTE4OC40IDk5LjljMCA0LjgtMy45IDguNy04LjYgOC43aC00Ni4zdjIyLjljMCA0LjgtMy45IDguNy04LjcgOC43aC0xMy40Yy00LjggMC04LjctMy45LTguNy04LjdWNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoNjguNGM0LjcgMCA4LjYgMy45IDguNiA4Ljd2NDUuMnpNMjc0LjYgNTQuN2MwLTQuOCAzLjktOC43IDguNy04LjdoMjdjNC44IDAgOC43IDMuOSA4LjcgOC43djc2LjhjMCA0LjgtMy45IDguNy04LjcgOC43aC0yN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0Ljd6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTI2NS45IDc3LjRjNC44IDAgOC43IDMuOSA4LjcgOC43djQ1LjRjMCA0LjgtMy45IDguNy04LjcgOC43aC02OC44Yy00LjggMC04LjctMy45LTguNy04Ljd2LTE0LjJjMC00LjggMy45LTguNyA4LjctOC43aDUwLjctNTAuN2MtNC44IDAtOC43LTMuOS04LjctOC43VjU0LjdjMC00LjggMy45LTguNyA4LjctOC43aDY4LjhjNC44IDAgOC43IDMuOSA4LjcgOC43djE0LjFjMCA0LjgtMy45IDguNi04LjcgOC42aC01MC4yIDUwLjJ6IiBjbGFzcz0ic3R5bGUxIi8+PHBhdGggZD0iTTEzMC43IDc3LjRoMjkuNCIgY2xhc3M9InN0eWxlMiIvPjxwYXRoIGQ9Ik0zMy44IDI5LjR2LTkuNmM0LjUuMSA2LjItMS45IDYuMi02LjQgMC01LjUtMy4yLTUuOC01LjctNS44aC0zLjV2MjEuOGgzem0uNC0xOS4zYzIuMSAwIDIuNyAxLjcgMi43IDMuNiAwIDIuNC0uNyAzLjgtMy4xIDMuNnYtNy4yaC40ek01MSA3LjZsLTQuOCAyMS44aDIuOWwuOC00LjJoNC4zbC45IDQuMmgyLjhMNTMuMiA3LjZINTF6bTIuOCAxNS4zaC0zLjVsMS44LTExLjEgMS4xIDggLjYgMy4xek02Ni41IDcuNnYxNS4xYzAgMy45LjUgNy4xIDUgNy4xIDUuMSAwIDUtMy45IDUtNi43VjcuNmgtMi45djE2LjNjMCAxLjktLjEgMy4xLTIuMSAzLjEtMS4yIDAtMi0uNi0yLTMuNHYtMTZoLTN6TTg2LjcgNy42djIxLjhoNy44di0yLjVoLTQuOVY3LjZoLTIuOXpNMTE5LjQgOC4xYy0uOS0uNi0xLjktLjgtMy4xLS44LTMuMiAwLTQuOCAyLjYtNC44IDUuNiAwIDUuNyA2IDYuNiA2IDExIDAgMS42LS43IDMtMi41IDMtMS4xIDAtMi0uNS0yLjgtMS4xdjIuOWMuOC43IDIgMS4xIDMuMSAxLjEgMy4yIDAgNS4yLTIuNyA1LjItNS44IDAtMi45LTEuMi00LjQtMy4yLTYuNGwtMi4xLTIuM2MtLjYtLjgtLjktMS41LS45LTIuNCAwLTEuNSAxLTIuOCAyLjYtMi44IDEgMCAxLjguMyAyLjUuOVY4LjF6TTEzOCA3LjljLS44LS40LTEuNS0uNi0yLjUtLjYtNS45IDAtNi41IDcuMi02LjUgMTEuNiAwIDQuNS44IDEwLjkgNi43IDEwLjkuOSAwIDEuNi0uMiAyLjMtLjd2LTIuNWMtLjUuMy0xLjEuNC0xLjcuNC00IDAtNC4yLTUuNC00LjItOC4zIDAtMi44IDAtOC42IDQuMS04LjYuNiAwIDEuMi4yIDEuOC41VjcuOXpNMTQ2LjkgNy42djIxLjhoM1YxOC42aDQuM3YxMC44aDIuOVY3LjZoLTIuOXY4LjVoLTQuM1Y3LjZoLTN6TTE2Ny4zIDcuNnYyMS44aDcuOHYtMi41aC00Ljl2LTcuNGg0LjNWMTdoLTQuM3YtNi45aDQuOVY3LjZoLTcuOHpNMTg0IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42SDE4NHYyMS44em0yLjktMTIuMXYtNy4yaC41YzIuMS0uMSAyLjQgMS43IDIuNCAzLjcgMCAyLjMtLjggMy42LTIuOSAzLjV6TTIwMi43IDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yMjEuNCA3LjZ2MjEuOGg3Ljh2LTIuNWgtNC45di03LjRoNC40VjE3aC00LjR2LTYuOWg0LjlWNy42aC03Ljh6TTIzOC4xIDI5LjRoMi45VjE4LjhsNCAxMC42aDNsLTQtMTAuNmMyLjQtLjQgMy0zLjUgMy01LjYgMC01LjQtMy4zLTUuNi01LjQtNS42aC0zLjV2MjEuOHptMi45LTEyLjF2LTcuMmguNWMyLjItLjEgMi40IDEuNyAyLjQgMy43IDAgMi4zLS43IDMuNi0yLjkgMy41ek0yNzAgNy42aC0yLjl2MjEuOGgyLjlWNy42ek0yODIuNSAxMi43bC4xLS4xIDUgMTYuOGgyLjdWNy42aC0yLjl2Ny44bC43IDguN3YuMUwyODMgNy42aC0yLjh2MjEuOGgyLjl2LThsLS40LTcuMy0uMi0xLjR6TTMwNy4zIDguMWMtMS0uNi0yLS44LTMuMS0uOC0zLjIgMC00LjkgMi42LTQuOSA1LjYgMCA1LjcgNi4xIDYuNiA2LjEgMTEgMCAxLjYtLjggMy0yLjUgMy0xLjEgMC0yLS41LTIuOS0xLjF2Mi45Yy45LjcgMi4xIDEuMSAzLjIgMS4xIDMuMiAwIDUuMS0yLjcgNS4xLTUuOCAwLTIuOS0xLjEtNC40LTMuMS02LjRsLTIuMi0yLjNjLS41LS44LS44LTEuNS0uOC0yLjQgMC0xLjUgMS0yLjggMi42LTIuOCAxIDAgMS43LjMgMi41LjlWOC4xek0zMTUuNiA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXpNMzM2LjQgNy42aC0zdjIxLjhoM1Y3LjZ6TTM0NC43IDcuNnYyLjVoMy40djE5LjNoMi45VjEwLjFoMy4yVjcuNmgtOS41ek0zNjIuNiA3LjZ2MTUuMWMwIDMuOS40IDcuMSA1IDcuMSA1IDAgNS0zLjkgNS02LjdWNy42aC0yLjl2MTYuM2MwIDEuOS0uMiAzLjEtMi4yIDMuMS0xLjIgMC0yLS42LTItMy40di0xNmgtMi45ek0zODAuOSA3LjZ2Mi41aDMuNHYxOS4zaDIuOVYxMC4xaDMuMlY3LjZoLTkuNXoiIGNsYXNzPSJzdHlsZTMiLz48L3N2Zz4='
---
# Source: basehub/templates/hub-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-etc-jupyter
data:
  {}
---
# Source: basehub/templates/storageclass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: userpool-storage-production
provisioner: disk.csi.azure.com
parameters:
  skuName: StandardSSD_LRS
  storageaccounttype: StandardSSD_LRS
  kind: Managed
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
reclaimPolicy: Delete
allowedTopologies:
  - matchLabelExpressions:
      - key: topology.kubernetes.io/zone
        values:
          - switzerlandnorth-1  # Change to switzerlandnorth-2 or switzerlandnorth-3
---
# Source: basehub/charts/jupyterhub/templates/hub/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: hub-db-dir
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  storageClassName: "userpool-storage-production"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  # Copied from the system:kube-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use. A modification has been made to
  # resourceName fields to remain relevant for how we have named our resources
  # in this Helm chart.
  #
  # NOTE: These rules have been:
  #       - unchanged between 1.12 and 1.15
  #       - changed in 1.16
  #       - changed in 1.17
  #       - unchanged between 1.18 and 1.20
  #       - changed in 1.21: get/list/watch permission for namespace,
  #                          csidrivers, csistoragecapacities was added.
  #       - unchanged between 1.22 and 1.27
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L736-L892
  - apiGroups:
    - ""
    - events.k8s.io
    resources:
    - events
    verbs:
    - create
    - patch
    - update
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - create
  - apiGroups:
    - coordination.k8s.io
    resourceNames:
    - user-scheduler-lock
    resources:
    - leases
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
  - apiGroups:
    - ""
    resourceNames:
    - user-scheduler-lock
    resources:
    - endpoints
    verbs:
    - get
    - update
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - pods
    verbs:
    - delete
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - bindings
    - pods/binding
    verbs:
    - create
  - apiGroups:
    - ""
    resources:
    - pods/status
    verbs:
    - patch
    - update
  - apiGroups:
    - ""
    resources:
    - replicationcontrollers
    - services
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    - extensions
    resources:
    - replicasets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - apps
    resources:
    - statefulsets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - policy
    resources:
    - poddisruptionbudgets
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    - persistentvolumes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - authentication.k8s.io
    resources:
    - tokenreviews
    verbs:
    - create
  - apiGroups:
    - authorization.k8s.io
    resources:
    - subjectaccessreviews
    verbs:
    - create
  - apiGroups:
    - storage.k8s.io
    resources:
    - csinodes
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csidrivers
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - csistoragecapacities
    verbs:
    - get
    - list
    - watch

  # Copied from the system:volume-scheduler ClusterRole of the k8s version
  # matching the kube-scheduler binary we use.
  #
  # NOTE: These rules have not changed between 1.12 and 1.27.
  #
  # ref: https://github.com/kubernetes/kubernetes/blob/v1.27.0/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml#L1311-L1338
  - apiGroups:
    - ""
    resources:
    - persistentvolumes
    verbs:
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - storage.k8s.io
    resources:
    - storageclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    resources:
    - persistentvolumeclaims
    verbs:
    - get
    - list
    - patch
    - update
    - watch
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: production-user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: user-scheduler
    namespace: "production"
roleRef:
  kind: ClusterRole
  name: production-user-scheduler
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["pods", "persistentvolumeclaims", "secrets", "services"]
    verbs: ["get", "watch", "list", "create", "delete"]
  - apiGroups: [""]       # "" indicates the core API group
    resources: ["events"]
    verbs: ["get", "watch", "list"]
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "list", "create"]
---
# Source: basehub/charts/jupyterhub/templates/hub/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: hub
    namespace: "production"
roleRef:
  kind: Role
  name: hub
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
subjects:
- kind: ServiceAccount
  name: autohttps
  apiGroup:
roleRef:
  kind: Role
  name: autohttps
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/hub/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /hub/metrics
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  selector:
    component: hub
    app: jupyterhub
    release: production
  ports:
    - name: hub
      port: 8081
      targetPort: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-http
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  type: ClusterIP
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8000
      targetPort: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-api
  labels:
    component: proxy-api
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    component: proxy
    app: jupyterhub
    release: production
  ports:
    - port: 8001
      targetPort: api
---
# Source: basehub/charts/jupyterhub/templates/proxy/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: proxy-public
  labels:
    component: proxy-public
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    # This service will target the autohttps pod if autohttps is configured, and
    # the proxy pod if not. When autohttps is configured, the service proxy-http
    # will be around to target the proxy pod directly.
    component: autohttps
    app: jupyterhub
    release: production
  ports:
    - name: https
      port: 443
      # When HTTPS termination is handled outside our helm chart, pass traffic
      # coming in via this Service's port 443 to targeted pod's port meant for
      # HTTP traffic.
      targetPort: https
    - name: http
      port: 80
      targetPort: http
  type: LoadBalancer
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-continuous.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: continuous-image-puller
  labels:
    component: continuous-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  selector:
    matchLabels:
      component: continuous-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: continuous-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/hub/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hub
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: hub
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        checksum/config-map: 4a3737dc265869bf7c416b95a7509ab6cbbac87919b0bc4699c1c7e7228fbe31
        checksum/secret: 7c60907c867d8e965c38f5c1cac2e90614774dcc312a97a476bb22f031787fc7
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: hub
        - name: secret
          secret:
            secretName: hub
        - configMap:
            name: hub-templates
          name: hub-templates
        - configMap:
            name: hub-external
          name: hub-external
        - name: pvc
          persistentVolumeClaim:
            claimName: hub-db-dir
      serviceAccountName: hub
      securityContext:
        fsGroup: 1000
      containers:
        - name: hub
          image: quay.io/jupyterhub/k8s-hub:3.3.8
          args:
            - jupyterhub
            - --config
            - /usr/local/etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          volumeMounts:
            - mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.py
              subPath: jupyterhub_config.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/z2jh.py
              subPath: z2jh.py
              name: config
            - mountPath: /usr/local/etc/jupyterhub/config/
              name: config
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
            - mountPath: /etc/jupyterhub/templates
              name: hub-templates
            - mountPath: /usr/local/share/jupyterhub/static/external
              name: hub-external
            - mountPath: /srv/jupyterhub
              name: pvc
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 1000
            runAsUser: 1000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: "production"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            httpGet:
              path: /hub/health
              port: http
---
# Source: basehub/charts/jupyterhub/templates/proxy/autohttps/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autohttps
  labels:
    component: autohttps
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: autohttps
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: autohttps
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-proxy-http: "true"
      annotations:
        # Only force a restart through a change to this checksum when the static
        # configuration is changed, as the dynamic can be updated after start.
        # Any disruptions to this deployment impacts everything, it is the
        # entrypoint of all network traffic.
        checksum/static-config: a57b3caf3f1a67df6ef444e132303d87f4e4894c3bd1a71826b2933b71ec806a
    spec:
      serviceAccountName: autohttps
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: certificates
          emptyDir: {}
        - name: traefik-config
          configMap:
            name: autohttps
      initContainers:
        - name: load-acme
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - load
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
            # We need this to get logs immediately
            - name: PYTHONUNBUFFERED
              value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: traefik
          image: "traefik:v2.11.0"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          volumeMounts:
            - name: traefik-config
              mountPath: /etc/traefik
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: secret-sync
          image: "quay.io/jupyterhub/k8s-secret-sync:3.3.8"
          args:
            - watch-save
            - --label=app=jupyterhub
            - --label=release=production
            - --label=chart=jupyterhub-3.3.8
            - --label=heritage=secret-sync
            - proxy-public-tls-acme
            - acme.json
            - /etc/acme/acme.json
          env:
          # We need this to get logs immediately
          - name: PYTHONUNBUFFERED
            value: "True"
          volumeMounts:
            - name: certificates
              mountPath: /etc/acme
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/proxy/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    component: proxy
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      component: proxy
      app: jupyterhub
      release: production
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        component: proxy
        app: jupyterhub
        release: production
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
      annotations:
        # We want to restart proxy only if the auth token changes
        # Other changes to the hub config should not restart.
        # We truncate to 4 chars to avoid leaking auth token info,
        # since someone could brute force the hash to obtain the token
        #
        # Note that if auth_token has to be generated at random, it will be
        # generated at random here separately from being generated at random in
        # the k8s Secret template. This will cause this annotation to change to
        # match the k8s Secret during the first upgrade following an auth_token
        # was generated.
        checksum/auth-token: "492b"
        checksum/proxy-secret: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
    spec:
      terminationGracePeriodSeconds: 60
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      containers:
        - name: chp
          image: quay.io/jupyterhub/configurable-http-proxy:4.6.1
          command:
            - configurable-http-proxy
            - "--ip="
            - "--api-ip="
            - --api-port=8001
            - --default-target=http://hub:$(HUB_SERVICE_PORT)
            - --error-target=http://hub:$(HUB_SERVICE_PORT)/hub/error
            - --port=8000
          env:
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  # NOTE: References the chart managed k8s Secret even if
                  #       hub.existingSecret is specified to avoid using the
                  #       lookup function on the user managed k8s Secret.
                  name: hub
                  key: hub.config.ConfigurableHTTPProxy.auth_token
          ports:
            - name: http
              containerPort: 8000
            - name: api
              containerPort: 8001
          livenessProbe:
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          readinessProbe:
            initialDelaySeconds: 0
            periodSeconds: 2
            timeoutSeconds: 1
            failureThreshold: 1000
            httpGet:
              path: /_chp_healthz
              port: http
              scheme: HTTP
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-scheduler/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-scheduler
  labels:
    component: user-scheduler
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      component: user-scheduler
      app: jupyterhub
      release: production
  template:
    metadata:
      labels:
        component: user-scheduler
        app: jupyterhub
        release: production
      annotations:
        checksum/config-map: b8f3cecec7a35ee90e436feb3a0882c932ac69bdc34a216c857e70736b6ce89d
    spec:
      
      serviceAccountName: user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [core]
      volumes:
        - name: config
          configMap:
            name: user-scheduler
      containers:
        - name: kube-scheduler
          image: registry.k8s.io/kube-scheduler:v1.26.15
          command:
            - /usr/local/bin/kube-scheduler
            # NOTE: --authentication-skip-lookup=true is used to avoid a
            #       seemingly harmless error, if we need to not skip
            #       "authentication lookup" in the future, see the linked issue.
            #
            # ref: https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1894
            - --config=/etc/user-scheduler/config.yaml
            - --authentication-skip-lookup=true
            - --v=4
          volumeMounts:
            - mountPath: /etc/user-scheduler
              name: config
          livenessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
            initialDelaySeconds: 15
          readinessProbe:
            httpGet:
              path: /healthz
              scheme: HTTPS
              port: 10259
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/scheduling/user-placeholder/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-placeholder
  labels:
    component: user-placeholder
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
spec:
  podManagementPolicy: Parallel
  replicas: 0
  selector:
    matchLabels:
      component: user-placeholder
      app: jupyterhub
      release: production
  serviceName: user-placeholder
  template:
    metadata:
      labels:
        component: user-placeholder
        app: jupyterhub
        release: production
    spec:
      schedulerName: production-user-scheduler
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: hub.jupyter.org/node-purpose
                    operator: In
                    values: [user]
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          resources:
            requests:
              cpu: 1.5
              memory: 6G
            limits:
              cpu: 2
              memory: 6G
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/templates/users-config.yaml
jupyterhub:
    hub:
        config:
            GitHubOAuthenticator:
                allowed_users:
                  - superstar54
                  - unkcpz
                  - edan-bainglass
                  - giovannipizzi
                  - t-reents
                  - AndresOrtegaGuerrero
                allow_existing_users: false
---
# Source: basehub/charts/jupyterhub/templates/image-puller/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
rules:
  - apiGroups: ["apps"]       # "" indicates the core API group
    resources: ["daemonsets"]
    verbs: ["get"]
---
# Source: basehub/charts/jupyterhub/templates/image-puller/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "0"
subjects:
  - kind: ServiceAccount
    name: hook-image-awaiter
    namespace: "production"
roleRef:
  kind: Role
  name: hook-image-awaiter
  apiGroup: rbac.authorization.k8s.io
---
# Source: basehub/charts/jupyterhub/templates/image-puller/daemonset-hook.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hook-image-puller
  labels:
    component: hook-image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-10"
spec:
  selector:
    matchLabels:
      component: hook-image-puller
      app: jupyterhub
      release: production
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 100%
  template:
    metadata:
      labels:
        component: hook-image-puller
        app: jupyterhub
        release: production
    spec:
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: user
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: user
      terminationGracePeriodSeconds: 0
      automountServiceAccountToken: false
      initContainers:
        - name: image-pull-metadata-block
          image: quay.io/jupyterhub/k8s-network-tools:3.3.8
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
        - name: image-pull-singleuser
          image: aiidalab/qe:latest
          command:
            - /bin/sh
            - -c
            - echo "Pulling complete"
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
      containers:
        - name: pause
          image: registry.k8s.io/pause:3.9
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
---
# Source: basehub/charts/jupyterhub/templates/image-puller/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: hook-image-awaiter
  labels:
    component: image-puller
    app: jupyterhub
    release: production
    chart: jupyterhub-3.3.8
    heritage: Helm
    hub.jupyter.org/deletable: "true"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "10"
spec:
  template:
    # The hook-image-awaiter Job and hook-image-puller DaemonSet was
    # conditionally created based on this state:
    #
    # prePuller.hook.enabled=true
    # prePuller.hook.pullOnlyOnChanges=true
    # post-upgrade checksum != pre-upgrade checksum (of the hook-image-puller DaemonSet)
    # "19acf62bd8f81846fa95ccac2e3bbae80782d1c8164c73ca4b245e99f5e4b11c" != ""
    #
    metadata:
      labels:
        component: image-puller
        app: jupyterhub
        release: production
    spec:
      restartPolicy: Never
      serviceAccountName: hook-image-awaiter
      tolerations:
        - effect: NoSchedule
          key: hub.jupyter.org/dedicated
          operator: Equal
          value: core
        - effect: NoSchedule
          key: hub.jupyter.org_dedicated
          operator: Equal
          value: core
      containers:
        - image: quay.io/jupyterhub/k8s-image-awaiter:3.3.8
          name: hook-image-awaiter
          command:
            - /image-awaiter
            - -ca-path=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - -auth-token-path=/var/run/secrets/kubernetes.io/serviceaccount/token
            - -api-server-address=https://kubernetes.default.svc:$(KUBERNETES_SERVICE_PORT)
            - -namespace=production
            - -daemonset=hook-image-puller
            - -pod-scheduling-wait-duration=10
          securityContext:
            allowPrivilegeEscalation: false
            runAsGroup: 65534
            runAsUser: 65534
